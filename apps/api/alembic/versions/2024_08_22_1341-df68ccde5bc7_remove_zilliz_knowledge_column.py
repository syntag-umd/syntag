"""azure db changes

Revision ID: df68ccde5bc7
Revises: c3eb1fde5238
Create Date: 2024-08-22 13:41:45.549608

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "df68ccde5bc7"
down_revision: Union[str, None] = "c3eb1fde5238"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("ix_faqbot_message_uuid", table_name="faqbot_message")
    op.drop_table("faqbot_message")
    op.drop_index("ix_faqbot_conversation_uuid", table_name="faqbot_conversation")
    op.drop_table("faqbot_conversation")
    op.drop_index("ix_issue_uuid", table_name="issue")
    op.drop_table("issue")
    op.drop_index("ix_embeddings_uuid", table_name="embeddings")
    op.drop_table("embeddings")
    op.create_unique_constraint(None, "chunks", ["id"])
    op.add_column("knowledge", sa.Column("display_name", sa.Text(), nullable=True))
    op.drop_column("knowledge", "file_display_name")
    op.drop_column("knowledge", "zilliz_doc_name")
    op.drop_column("user", "faqbot_faq")
    op.drop_column("user", "faqbot_assistant_id")
    op.drop_column("user", "autoresolution_assistant_id")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "user",
        sa.Column(
            "autoresolution_assistant_id", sa.TEXT(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "user",
        sa.Column("faqbot_assistant_id", sa.TEXT(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "user", sa.Column("faqbot_faq", sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.add_column(
        "knowledge",
        sa.Column("zilliz_doc_name", sa.TEXT(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "knowledge",
        sa.Column("file_display_name", sa.TEXT(), autoincrement=False, nullable=True),
    )
    op.drop_column("knowledge", "display_name")
    op.drop_constraint(None, "chunks", type_="unique")
    op.create_table(
        "embeddings",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "uuid",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("cluster_id", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("user_uuid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "ingestion_pipeline_id", sa.TEXT(), autoincrement=False, nullable=False
        ),
        sa.Column("search_pipeline_id", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "document_ingestion_pipeline_id",
            sa.TEXT(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "document_search_pipeline_id",
            sa.TEXT(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "document_delete_pipeline_id",
            sa.TEXT(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("cluster_name", sa.TEXT(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["user_uuid"],
            ["user.uuid"],
            name="embeddings_user_uuid_fkey",
            onupdate="CASCADE",
            ondelete="RESTRICT",
        ),
        sa.PrimaryKeyConstraint("id", name="embeddings_pkey"),
        sa.UniqueConstraint("id", name="embeddings_id_key"),
    )
    op.create_index("ix_embeddings_uuid", "embeddings", ["uuid"], unique=False)
    op.create_table(
        "issue",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "uuid",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("userUuid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "createdAt",
            postgresql.TIMESTAMP(precision=3),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updatedAt",
            postgresql.TIMESTAMP(precision=3),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("name", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("description", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "resolution_type",
            postgresql.ENUM(
                "UNRESOLVABLE",
                "RESOLVABLE_VIA_TICKET",
                "AUTORESOLVABLE",
                name="ResolutionType",
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "fields_to_collect",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default=sa.text("'{}'::jsonb"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "field_descriptions",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default=sa.text("'{}'::jsonb"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["userUuid"],
            ["user.uuid"],
            name="issue_userUuid_fkey",
            onupdate="CASCADE",
            ondelete="RESTRICT",
        ),
        sa.PrimaryKeyConstraint("id", name="issue_pkey"),
        sa.UniqueConstraint("id", name="issue_id_key"),
    )
    op.create_index("ix_issue_uuid", "issue", ["uuid"], unique=False)
    op.create_table(
        "faqbot_conversation",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('faqbot_conversation_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "uuid",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("userUuid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "createdAt",
            postgresql.TIMESTAMP(precision=3),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updatedAt",
            postgresql.TIMESTAMP(precision=3),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "medium",
            postgresql.ENUM("PHONE", "VOICECHAT", "CHAT", name="Medium"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "language",
            postgresql.ENUM("ENGLISH", "SPANISH", name="Language"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("tokenCount", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("faq", sa.TEXT(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["userUuid"],
            ["user.uuid"],
            name="faqbot_conversation_userUuid_fkey",
            onupdate="CASCADE",
            ondelete="RESTRICT",
        ),
        sa.PrimaryKeyConstraint("id", name="faqbot_conversation_pkey"),
        sa.UniqueConstraint("id", name="faqbot_conversation_id_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index(
        "ix_faqbot_conversation_uuid", "faqbot_conversation", ["uuid"], unique=False
    )
    op.create_table(
        "faqbot_message",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "uuid",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("userUuid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "createdAt",
            postgresql.TIMESTAMP(precision=3),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updatedAt",
            postgresql.TIMESTAMP(precision=3),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "role",
            postgresql.ENUM("SYSTEM", "USER", "ASSISTANT", "TOOL", name="Role"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("content", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "faqbotConversationUuid", sa.UUID(), autoincrement=False, nullable=False
        ),
        sa.Column("tokenCount", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["faqbotConversationUuid"],
            ["faqbot_conversation.uuid"],
            name="faqbot_message_faqbotConversationUuid_fkey",
            onupdate="CASCADE",
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["userUuid"],
            ["user.uuid"],
            name="faqbot_message_userUuid_fkey",
            onupdate="CASCADE",
            ondelete="RESTRICT",
        ),
        sa.PrimaryKeyConstraint("id", name="faqbot_message_pkey"),
        sa.UniqueConstraint("id", name="faqbot_message_id_key"),
    )
    op.create_index("ix_faqbot_message_uuid", "faqbot_message", ["uuid"], unique=False)
    # ### end Alembic commands ###
