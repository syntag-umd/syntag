"""empty message

Revision ID: c00e3d88ee44
Revises:
Create Date: 2024-03-23 11:52:33.669191

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "c00e3d88ee44"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user",
        sa.Column(
            "id",
            sa.Integer(),
            server_default=sa.text("nextval('\"user_id_seq\"'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "uuid",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column(
            "createdAt",
            postgresql.TIMESTAMP(precision=3),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updatedAt",
            postgresql.TIMESTAMP(precision=3),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("email", sa.Text(), nullable=True),
        sa.Column("api_key", sa.Text(), nullable=False),
        sa.Column("faqbot_faq", sa.Text(), nullable=True),
        sa.Column("faqbot_assistant_id", sa.Text(), nullable=True),
        sa.Column("autoresolution_assistant_id", sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_index(op.f("ix_user_uuid"), "user", ["uuid"], unique=True)
    op.create_table(
        "conversation",
        sa.Column(
            "id",
            sa.Integer(),
            server_default=sa.text("nextval('\"conversation_id_seq\"'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "uuid",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("userUuid", sa.UUID(), nullable=False),
        sa.Column(
            "createdAt",
            postgresql.TIMESTAMP(precision=3),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updatedAt",
            postgresql.TIMESTAMP(precision=3),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("model", sa.Enum("GPT_3_5", "GPT_4", name="LLM"), nullable=False),
        sa.Column(
            "medium",
            sa.Enum("PHONE", "VOICECHAT", "CHAT", name="Medium"),
            nullable=False,
        ),
        sa.Column(
            "language", sa.Enum("ENGLISH", "SPANISH", name="Language"), nullable=False
        ),
        sa.Column("tokenCount", sa.Integer(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "TRYING_TO_FIND_ISSUE",
                "FOUND_UNRESOLVABLE_ISSUE_WAITING_FOR_FINAL_ISSUE_DIAGNOSIS",
                "FOUND_UNIDENTIFIABLE_ISSUE_WAITING_FOR_FINAL_ISSUE_DIAGNOSIS",
                "FOUND_RESOLVABLE_ISSUE_WAITING_FOR_FINAL_ISSUE_DIAGNOSIS",
                "FOUND_AUTORESOLVABLE_ISSUE_WAITING_FOR_FINAL_ISSUE_DIAGNOSIS",
                "COLLECTING_ISSUE_INFO",
                "AUTORESOLVED_ISSUE",
                "CONVERSATION_ENDED",
                name="ConversationStatus",
            ),
            server_default=sa.text("'TRYING_TO_FIND_ISSUE'::\"ConversationStatus\""),
            nullable=False,
        ),
        sa.Column(
            "apiSpecification",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default=sa.text("'{}'::jsonb"),
            nullable=True,
        ),
        sa.Column("assistantId", sa.Text(), nullable=False),
        sa.Column(
            "collectedFields",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default=sa.text("'{}'::jsonb"),
            nullable=True,
        ),
        sa.Column(
            "currentField", sa.Text(), server_default=sa.text("''::text"), nullable=True
        ),
        sa.Column(
            "currentIssue",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default=sa.text("'{}'::jsonb"),
            nullable=True,
        ),
        sa.Column(
            "fieldDescriptions",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default=sa.text("'{}'::jsonb"),
            nullable=True,
        ),
        sa.Column(
            "fieldsToCollect",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default=sa.text("'{}'::jsonb"),
            nullable=True,
        ),
        sa.Column(
            "findIssueCount", sa.Integer(), server_default=sa.text("0"), nullable=True
        ),
        sa.Column(
            "issues",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default=sa.text("'{}'::jsonb"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["userUuid"], ["user.uuid"], onupdate="CASCADE", ondelete="RESTRICT"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_index(op.f("ix_conversation_uuid"), "conversation", ["uuid"], unique=True)
    op.create_table(
        "faqbot_conversation",
        sa.Column(
            "id",
            sa.Integer(),
            server_default=sa.text(
                "nextval('\"faqbot_conversation_id_seq\"'::regclass)"
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "uuid",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("userUuid", sa.UUID(), nullable=False),
        sa.Column(
            "createdAt",
            postgresql.TIMESTAMP(precision=3),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updatedAt",
            postgresql.TIMESTAMP(precision=3),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("model", sa.Enum("GPT_3_5", "GPT_4", name="LLM"), nullable=False),
        sa.Column(
            "medium",
            sa.Enum("PHONE", "VOICECHAT", "CHAT", name="Medium"),
            nullable=False,
        ),
        sa.Column(
            "language", sa.Enum("ENGLISH", "SPANISH", name="Language"), nullable=False
        ),
        sa.Column("tokenCount", sa.Integer(), nullable=False),
        sa.Column("faq", sa.Text(), nullable=False),
        sa.ForeignKeyConstraint(
            ["userUuid"], ["user.uuid"], onupdate="CASCADE", ondelete="RESTRICT"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_index(
        op.f("ix_faqbot_conversation_uuid"),
        "faqbot_conversation",
        ["uuid"],
        unique=True,
    )
    op.create_table(
        "issue",
        sa.Column(
            "id",
            sa.Integer(),
            server_default=sa.text("nextval('\"issue_id_seq\"'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "uuid",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("userUuid", sa.UUID(), nullable=False),
        sa.Column(
            "createdAt",
            postgresql.TIMESTAMP(precision=3),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updatedAt",
            postgresql.TIMESTAMP(precision=3),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("description", sa.Text(), nullable=False),
        sa.Column(
            "resolution_type",
            sa.Enum(
                "UNRESOLVABLE",
                "RESOLVABLE_VIA_TICKET",
                "AUTORESOLVABLE",
                name="ResolutionType",
            ),
            nullable=False,
        ),
        sa.Column(
            "fields_to_collect",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default=sa.text("'{}'::jsonb"),
            nullable=True,
        ),
        sa.Column(
            "field_descriptions",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default=sa.text("'{}'::jsonb"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["userUuid"], ["user.uuid"], onupdate="CASCADE", ondelete="RESTRICT"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_index(op.f("ix_issue_uuid"), "issue", ["uuid"], unique=True)
    op.create_table(
        "faqbot_message",
        sa.Column(
            "id",
            sa.Integer(),
            server_default=sa.text("nextval('\"faqbot_message_id_seq\"'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "uuid",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("userUuid", sa.UUID(), nullable=False),
        sa.Column(
            "createdAt",
            postgresql.TIMESTAMP(precision=3),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updatedAt",
            postgresql.TIMESTAMP(precision=3),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("role", sa.Enum("SYSTEM", "USER", name="Role"), nullable=False),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column("faqbotConversationUuid", sa.UUID(), nullable=False),
        sa.Column("tokenCount", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["faqbotConversationUuid"],
            ["conversation.uuid"],
            onupdate="CASCADE",
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["userUuid"], ["user.uuid"], onupdate="CASCADE", ondelete="RESTRICT"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_index(
        op.f("ix_faqbot_message_uuid"), "faqbot_message", ["uuid"], unique=True
    )
    op.create_table(
        "message",
        sa.Column(
            "id",
            sa.Integer(),
            server_default=sa.text("nextval('\"message_id_seq\"'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "uuid",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("userUuid", sa.UUID(), nullable=False),
        sa.Column(
            "createdAt",
            postgresql.TIMESTAMP(precision=3),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updatedAt",
            postgresql.TIMESTAMP(precision=3),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("role", sa.Enum("SYSTEM", "USER", name="Role"), nullable=False),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column("conversationUuid", sa.UUID(), nullable=False),
        sa.Column("tokenCount", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["conversationUuid"],
            ["conversation.uuid"],
            onupdate="CASCADE",
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["userUuid"], ["user.uuid"], onupdate="CASCADE", ondelete="RESTRICT"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_index(op.f("ix_message_uuid"), "message", ["uuid"], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_message_uuid"), table_name="message")
    op.drop_table("message")
    op.drop_index(op.f("ix_faqbot_message_uuid"), table_name="faqbot_message")
    op.drop_table("faqbot_message")
    op.drop_index(op.f("ix_issue_uuid"), table_name="issue")
    op.drop_table("issue")
    op.drop_index(op.f("ix_faqbot_conversation_uuid"), table_name="faqbot_conversation")
    op.drop_table("faqbot_conversation")
    op.drop_index(op.f("ix_conversation_uuid"), table_name="conversation")
    op.drop_table("conversation")
    op.drop_index(op.f("ix_user_uuid"), table_name="user")
    op.drop_table("user")
    # ### end Alembic commands ###
