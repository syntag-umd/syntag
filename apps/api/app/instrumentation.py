import logging
from opentelemetry.sdk.trace import TracerProvider
from opentelemetry.trace import (
    set_tracer_provider,
)
from opentelemetry.sdk.trace.export import BatchSpanProcessor
from opentelemetry.exporter.otlp.proto.http.trace_exporter import OTLPSpanExporter
from opentelemetry.instrumentation.httpx import HTTPXClientInstrumentor
from opentelemetry.instrumentation.requests import RequestsInstrumentor
from opentelemetry.instrumentation.logging import LoggingInstrumentor
from opentelemetry.sdk._logs import LoggerProvider, LoggingHandler
from opentelemetry._logs import set_logger_provider
from opentelemetry.exporter.otlp.proto.http._log_exporter import OTLPLogExporter
from opentelemetry.sdk._logs.export import BatchLogRecordProcessor

global_tracer = TracerProvider()
set_tracer_provider(global_tracer)
global_tracer.add_span_processor(BatchSpanProcessor(OTLPSpanExporter()))

# an instrumentor for [stdlib] logging module.
# This instrumentor injects tracing context into logging records
LoggingInstrumentor().instrument(set_logging_format=True)

# Initializes a logger provider responsible for creating Logger instances.
# Logger instances are responsible for creating and emitting the log records
# logger.getLogger() returns a Logger instance
logger_provider = LoggerProvider()
# Sets the current global LoggerProvider object.
set_logger_provider(logger_provider)

# Creates an exporter to send log records to the OTLP endpoint
log_exporter = OTLPLogExporter()
# Sends the logs in batchers
log_exporter_processor = BatchLogRecordProcessor(log_exporter)
# Configures the how the logger provider will export the logs
logger_provider.add_log_record_processor(log_exporter_processor)

# Allows OTEL to intercept all logs generated by the logging module.
logging.getLogger().addHandler(LoggingHandler())

HTTPXClientInstrumentor().instrument()
RequestsInstrumentor().instrument()
