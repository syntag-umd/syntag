# generated by datamodel-codegen:
#   filename:  https://api.vapi.ai/api-json
#   timestamp: 2024-09-15T01:21:12+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Union

from typing_extensions import Literal, NotRequired, TypedDict


class DeepgramTranscriber(TypedDict):
    provider: Literal["deepgram"]
    model: NotRequired[
        Union[
            Literal[
                "nova-2",
                "nova-2-general",
                "nova-2-meeting",
                "nova-2-phonecall",
                "nova-2-finance",
                "nova-2-conversationalai",
                "nova-2-voicemail",
                "nova-2-video",
                "nova-2-medical",
                "nova-2-drivethru",
                "nova-2-automotive",
                "nova",
                "nova-general",
                "nova-phonecall",
                "nova-medical",
                "enhanced",
                "enhanced-general",
                "enhanced-meeting",
                "enhanced-phonecall",
                "enhanced-finance",
                "base",
                "base-general",
                "base-meeting",
                "base-phonecall",
                "base-finance",
                "base-conversationalai",
                "base-voicemail",
                "base-video",
            ],
            str,
        ]
    ]
    language: NotRequired[
        Literal[
            "bg",
            "ca",
            "cs",
            "da",
            "da-DK",
            "de",
            "de-CH",
            "el",
            "en",
            "en-AU",
            "en-GB",
            "en-IN",
            "en-NZ",
            "en-US",
            "es",
            "es-419",
            "es-LATAM",
            "et",
            "fi",
            "fr",
            "fr-CA",
            "hi",
            "hi-Latn",
            "hu",
            "id",
            "it",
            "ja",
            "ko",
            "ko-KR",
            "lt",
            "lv",
            "ms",
            "multi",
            "nl",
            "nl-BE",
            "no",
            "pl",
            "pt",
            "pt-BR",
            "ro",
            "ru",
            "sk",
            "sv",
            "sv-SE",
            "ta",
            "taq",
            "th",
            "th-TH",
            "tr",
            "uk",
            "vi",
            "zh",
            "zh-CN",
            "zh-Hans",
            "zh-Hant",
            "zh-TW",
        ]
    ]
    smartFormat: NotRequired[bool]
    languageDetectionEnabled: NotRequired[bool]
    keywords: NotRequired[List[str]]
    endpointing: NotRequired[float]


class TalkscriberTranscriber(TypedDict):
    provider: Literal["talkscriber"]
    model: NotRequired[Literal["whisper"]]
    language: NotRequired[
        Literal[
            "en",
            "zh",
            "de",
            "es",
            "ru",
            "ko",
            "fr",
            "ja",
            "pt",
            "tr",
            "pl",
            "ca",
            "nl",
            "ar",
            "sv",
            "it",
            "id",
            "hi",
            "fi",
            "vi",
            "he",
            "uk",
            "el",
            "ms",
            "cs",
            "ro",
            "da",
            "hu",
            "ta",
            "no",
            "th",
            "ur",
            "hr",
            "bg",
            "lt",
            "la",
            "mi",
            "ml",
            "cy",
            "sk",
            "te",
            "fa",
            "lv",
            "bn",
            "sr",
            "az",
            "sl",
            "kn",
            "et",
            "mk",
            "br",
            "eu",
            "is",
            "hy",
            "ne",
            "mn",
            "bs",
            "kk",
            "sq",
            "sw",
            "gl",
            "mr",
            "pa",
            "si",
            "km",
            "sn",
            "yo",
            "so",
            "af",
            "oc",
            "ka",
            "be",
            "tg",
            "sd",
            "gu",
            "am",
            "yi",
            "lo",
            "uz",
            "fo",
            "ht",
            "ps",
            "tk",
            "nn",
            "mt",
            "sa",
            "lb",
            "my",
            "bo",
            "tl",
            "mg",
            "as",
            "tt",
            "haw",
            "ln",
            "ha",
            "ba",
            "jw",
            "su",
            "yue",
        ]
    ]


class GladiaTranscriber(TypedDict):
    provider: Literal["gladia"]
    model: NotRequired[Literal["fast", "accurate"]]
    languageBehaviour: NotRequired[
        Literal["manual", "automatic single language", "automatic multiple languages"]
    ]
    language: NotRequired[
        Literal[
            "af",
            "sq",
            "am",
            "ar",
            "hy",
            "as",
            "az",
            "ba",
            "eu",
            "be",
            "bn",
            "bs",
            "br",
            "bg",
            "ca",
            "zh",
            "hr",
            "cs",
            "da",
            "nl",
            "en",
            "et",
            "fo",
            "fi",
            "fr",
            "gl",
            "ka",
            "de",
            "el",
            "gu",
            "ht",
            "ha",
            "haw",
            "he",
            "hi",
            "hu",
            "is",
            "id",
            "it",
            "ja",
            "jp",
            "jv",
            "kn",
            "kk",
            "km",
            "ko",
            "lo",
            "la",
            "lv",
            "ln",
            "lt",
            "lb",
            "mk",
            "mg",
            "ms",
            "ml",
            "mt",
            "mi",
            "mr",
            "mn",
            "mymr",
            "ne",
            "no",
            "nn",
            "oc",
            "ps",
            "fa",
            "pl",
            "pt",
            "pa",
            "ro",
            "ru",
            "sa",
            "sr",
            "sn",
            "sd",
            "si",
            "sk",
            "sl",
            "so",
            "es",
            "su",
            "sw",
            "sv",
            "tl",
            "tg",
            "ta",
            "tt",
            "te",
            "th",
            "bo",
            "tr",
            "tk",
            "uk",
            "ur",
            "uz",
            "vi",
            "cy",
            "yi",
            "yo",
        ]
    ]
    transcriptionHint: NotRequired[str]
    prosody: NotRequired[bool]
    audioEnhancer: NotRequired[bool]


class Condition(TypedDict):
    value: str
    operator: Literal["eq", "neq", "gt", "gte", "lt", "lte"]
    param: str


class ToolMessageStart(TypedDict):
    type: Literal["request-start"]
    content: str
    conditions: NotRequired[List[Condition]]


class ToolMessageComplete(TypedDict):
    type: Literal["request-complete"]
    role: NotRequired[Literal["assistant", "system"]]
    endCallAfterSpokenEnabled: NotRequired[bool]
    content: str
    conditions: NotRequired[List[Condition]]


class ToolMessageFailed(TypedDict):
    type: Literal["request-failed"]
    endCallAfterSpokenEnabled: NotRequired[bool]
    content: str
    conditions: NotRequired[List[Condition]]


class ToolMessageDelayed(TypedDict):
    type: Literal["request-response-delayed"]
    timingMilliseconds: NotRequired[float]
    content: str
    conditions: NotRequired[List[Condition]]


class JsonSchema(TypedDict):
    type: Literal["string", "number", "integer", "boolean", "array", "object"]
    items: NotRequired[Dict[str, Any]]
    properties: NotRequired[Dict[str, Any]]
    description: NotRequired[str]
    required: NotRequired[List[str]]


class OpenAIFunctionParameters(TypedDict):
    type: Literal["object"]
    properties: Dict[str, JsonSchema]
    required: NotRequired[List[str]]


class OpenAIFunction(TypedDict):
    name: str
    description: NotRequired[str]
    parameters: NotRequired[OpenAIFunctionParameters]


class Server(TypedDict):
    timeoutSeconds: NotRequired[float]
    url: str
    secret: NotRequired[str]


CreateDtmfToolDTO = TypedDict(
    "CreateDtmfToolDTO",
    {
        "async": NotRequired[bool],
        "messages": NotRequired[
            List[
                Union[
                    ToolMessageStart,
                    ToolMessageComplete,
                    ToolMessageFailed,
                    ToolMessageDelayed,
                ]
            ]
        ],
        "type": Literal["dtmf"],
        "function": NotRequired[OpenAIFunction],
        "server": NotRequired[Server],
    },
)


CreateEndCallToolDTO = TypedDict(
    "CreateEndCallToolDTO",
    {
        "async": NotRequired[bool],
        "messages": NotRequired[
            List[
                Union[
                    ToolMessageStart,
                    ToolMessageComplete,
                    ToolMessageFailed,
                    ToolMessageDelayed,
                ]
            ]
        ],
        "type": Literal["endCall"],
        "function": NotRequired[OpenAIFunction],
        "server": NotRequired[Server],
    },
)


CreateVoicemailToolDTO = TypedDict(
    "CreateVoicemailToolDTO",
    {
        "async": NotRequired[bool],
        "messages": NotRequired[
            List[
                Union[
                    ToolMessageStart,
                    ToolMessageComplete,
                    ToolMessageFailed,
                    ToolMessageDelayed,
                ]
            ]
        ],
        "type": Literal["voicemail"],
        "function": NotRequired[OpenAIFunction],
        "server": NotRequired[Server],
    },
)


CreateFunctionToolDTO = TypedDict(
    "CreateFunctionToolDTO",
    {
        "async": NotRequired[bool],
        "messages": NotRequired[
            List[
                Union[
                    ToolMessageStart,
                    ToolMessageComplete,
                    ToolMessageFailed,
                    ToolMessageDelayed,
                ]
            ]
        ],
        "type": Literal["function"],
        "function": NotRequired[OpenAIFunction],
        "server": NotRequired[Server],
    },
)


class GhlToolMetadata(TypedDict):
    workflowId: NotRequired[str]
    locationId: NotRequired[str]


CreateGhlToolDTO = TypedDict(
    "CreateGhlToolDTO",
    {
        "async": NotRequired[bool],
        "messages": NotRequired[
            List[
                Union[
                    ToolMessageStart,
                    ToolMessageComplete,
                    ToolMessageFailed,
                    ToolMessageDelayed,
                ]
            ]
        ],
        "type": Literal["ghl"],
        "metadata": GhlToolMetadata,
        "function": NotRequired[OpenAIFunction],
        "server": NotRequired[Server],
    },
)


class MakeToolMetadata(TypedDict):
    scenarioId: NotRequired[float]
    triggerHookId: NotRequired[float]


CreateMakeToolDTO = TypedDict(
    "CreateMakeToolDTO",
    {
        "async": NotRequired[bool],
        "messages": NotRequired[
            List[
                Union[
                    ToolMessageStart,
                    ToolMessageComplete,
                    ToolMessageFailed,
                    ToolMessageDelayed,
                ]
            ]
        ],
        "type": Literal["make"],
        "metadata": MakeToolMetadata,
        "function": NotRequired[OpenAIFunction],
        "server": NotRequired[Server],
    },
)


class TransferDestinationAssistant(TypedDict):
    type: Literal["assistant"]
    transferMode: NotRequired[
        Literal["rolling-history", "swap-system-message-in-history"]
    ]
    assistantName: str
    message: NotRequired[str]
    description: NotRequired[str]


class TransferDestinationStep(TypedDict):
    type: Literal["step"]
    stepName: str
    message: NotRequired[str]
    description: NotRequired[str]


class TransferDestinationNumber(TypedDict):
    type: Literal["number"]
    numberE164CheckEnabled: NotRequired[bool]
    number: str
    extension: NotRequired[str]
    callerId: NotRequired[str]
    message: NotRequired[str]
    description: NotRequired[str]


class TransferDestinationSip(TypedDict):
    type: Literal["sip"]
    sipUri: str
    message: NotRequired[str]
    description: NotRequired[str]


CreateTransferCallToolDTO = TypedDict(
    "CreateTransferCallToolDTO",
    {
        "async": NotRequired[bool],
        "messages": NotRequired[
            List[
                Union[
                    ToolMessageStart,
                    ToolMessageComplete,
                    ToolMessageFailed,
                    ToolMessageDelayed,
                ]
            ]
        ],
        "type": Literal["transferCall"],
        "destinations": NotRequired[
            List[
                Union[
                    TransferDestinationAssistant,
                    TransferDestinationStep,
                    TransferDestinationNumber,
                    TransferDestinationSip,
                ]
            ]
        ],
        "function": NotRequired[OpenAIFunction],
        "server": NotRequired[Server],
    },
)


class OpenAIMessage(TypedDict):
    content: str
    role: Literal["assistant", "function", "user", "system", "tool"]


class KnowledgeBase(TypedDict):
    provider: Literal["canonical"]
    topK: NotRequired[float]
    fileIds: List[str]


class AnyscaleModel(TypedDict):
    messages: NotRequired[List[OpenAIMessage]]
    tools: NotRequired[
        List[
            Union[
                CreateDtmfToolDTO,
                CreateEndCallToolDTO,
                CreateVoicemailToolDTO,
                CreateFunctionToolDTO,
                CreateGhlToolDTO,
                CreateMakeToolDTO,
                CreateTransferCallToolDTO,
            ]
        ]
    ]
    toolIds: NotRequired[List[str]]
    provider: Literal["anyscale"]
    model: str
    temperature: NotRequired[float]
    knowledgeBase: NotRequired[KnowledgeBase]
    maxTokens: NotRequired[float]
    emotionRecognitionEnabled: NotRequired[bool]
    numFastTurns: NotRequired[float]


class AnthropicModel(TypedDict):
    messages: NotRequired[List[OpenAIMessage]]
    tools: NotRequired[
        List[
            Union[
                CreateDtmfToolDTO,
                CreateEndCallToolDTO,
                CreateVoicemailToolDTO,
                CreateFunctionToolDTO,
                CreateGhlToolDTO,
                CreateMakeToolDTO,
                CreateTransferCallToolDTO,
            ]
        ]
    ]
    toolIds: NotRequired[List[str]]
    model: Literal[
        "claude-3-opus-20240229",
        "claude-3-sonnet-20240229",
        "claude-3-haiku-20240307",
        "claude-3-5-sonnet-20240620",
    ]
    provider: Literal["anthropic"]
    temperature: NotRequired[float]
    knowledgeBase: NotRequired[KnowledgeBase]
    maxTokens: NotRequired[float]
    emotionRecognitionEnabled: NotRequired[bool]
    numFastTurns: NotRequired[float]


class CustomLLMModel(TypedDict):
    messages: NotRequired[List[OpenAIMessage]]
    tools: NotRequired[
        List[
            Union[
                CreateDtmfToolDTO,
                CreateEndCallToolDTO,
                CreateVoicemailToolDTO,
                CreateFunctionToolDTO,
                CreateGhlToolDTO,
                CreateMakeToolDTO,
                CreateTransferCallToolDTO,
            ]
        ]
    ]
    toolIds: NotRequired[List[str]]
    provider: Literal["custom-llm"]
    metadataSendMode: NotRequired[Literal["off", "variable", "destructured"]]
    url: str
    model: str
    temperature: NotRequired[float]
    knowledgeBase: NotRequired[KnowledgeBase]
    maxTokens: NotRequired[float]
    emotionRecognitionEnabled: NotRequired[bool]
    numFastTurns: NotRequired[float]


class DeepInfraModel(TypedDict):
    messages: NotRequired[List[OpenAIMessage]]
    tools: NotRequired[
        List[
            Union[
                CreateDtmfToolDTO,
                CreateEndCallToolDTO,
                CreateVoicemailToolDTO,
                CreateFunctionToolDTO,
                CreateGhlToolDTO,
                CreateMakeToolDTO,
                CreateTransferCallToolDTO,
            ]
        ]
    ]
    toolIds: NotRequired[List[str]]
    provider: Literal["deepinfra"]
    model: str
    temperature: NotRequired[float]
    knowledgeBase: NotRequired[KnowledgeBase]
    maxTokens: NotRequired[float]
    emotionRecognitionEnabled: NotRequired[bool]
    numFastTurns: NotRequired[float]


class GroqModel(TypedDict):
    messages: NotRequired[List[OpenAIMessage]]
    tools: NotRequired[
        List[
            Union[
                CreateDtmfToolDTO,
                CreateEndCallToolDTO,
                CreateVoicemailToolDTO,
                CreateFunctionToolDTO,
                CreateGhlToolDTO,
                CreateMakeToolDTO,
                CreateTransferCallToolDTO,
            ]
        ]
    ]
    toolIds: NotRequired[List[str]]
    model: Literal[
        "llama-3.1-405b-reasoning",
        "llama-3.1-70b-versatile",
        "llama-3.1-8b-instant",
        "mixtral-8x7b-32768",
        "llama3-8b-8192",
        "llama3-70b-8192",
        "llama3-groq-8b-8192-tool-use-preview",
        "llama3-groq-70b-8192-tool-use-preview",
        "gemma-7b-it",
        "gemma2-9b-it",
    ]
    provider: Literal["groq"]
    temperature: NotRequired[float]
    knowledgeBase: NotRequired[KnowledgeBase]
    maxTokens: NotRequired[float]
    emotionRecognitionEnabled: NotRequired[bool]
    numFastTurns: NotRequired[float]


class FallbackModels(Enum):
    """
    These are the fallback models that will be used if the primary model fails. This shouldn't be specified unless you have a specific reason to do so. Vapi will automatically find the fastest fallbacks that make sense.
    """

    gpt_4o_mini = "gpt-4o-mini"
    gpt_4o_mini_2024_07_18 = "gpt-4o-mini-2024-07-18"
    gpt_4o = "gpt-4o"
    gpt_4o_2024_05_13 = "gpt-4o-2024-05-13"
    gpt_4o_2024_08_06 = "gpt-4o-2024-08-06"
    gpt_4_turbo = "gpt-4-turbo"
    gpt_4_turbo_2024_04_09 = "gpt-4-turbo-2024-04-09"
    gpt_4_turbo_preview = "gpt-4-turbo-preview"
    gpt_4_0125_preview = "gpt-4-0125-preview"
    gpt_4_1106_preview = "gpt-4-1106-preview"
    gpt_4 = "gpt-4"
    gpt_4_0613 = "gpt-4-0613"
    gpt_3_5_turbo = "gpt-3.5-turbo"
    gpt_3_5_turbo_0125 = "gpt-3.5-turbo-0125"
    gpt_3_5_turbo_1106 = "gpt-3.5-turbo-1106"
    gpt_3_5_turbo_16k = "gpt-3.5-turbo-16k"
    gpt_3_5_turbo_0613 = "gpt-3.5-turbo-0613"


class OpenAIModel(TypedDict):
    messages: NotRequired[List[OpenAIMessage]]
    tools: NotRequired[
        List[
            Union[
                CreateDtmfToolDTO,
                CreateEndCallToolDTO,
                CreateVoicemailToolDTO,
                CreateFunctionToolDTO,
                CreateGhlToolDTO,
                CreateMakeToolDTO,
                CreateTransferCallToolDTO,
            ]
        ]
    ]
    toolIds: NotRequired[List[str]]
    provider: Literal["openai"]
    model: Literal[
        "gpt-4o-mini",
        "gpt-4o-mini-2024-07-18",
        "gpt-4o",
        "gpt-4o-2024-05-13",
        "gpt-4o-2024-08-06",
        "gpt-4-turbo",
        "gpt-4-turbo-2024-04-09",
        "gpt-4-turbo-preview",
        "gpt-4-0125-preview",
        "gpt-4-1106-preview",
        "gpt-4",
        "gpt-4-0613",
        "gpt-3.5-turbo",
        "gpt-3.5-turbo-0125",
        "gpt-3.5-turbo-1106",
        "gpt-3.5-turbo-16k",
        "gpt-3.5-turbo-0613",
    ]
    fallbackModels: NotRequired[
        Union[
            List[
                Literal[
                    "gpt-4o-mini",
                    "gpt-4o-mini-2024-07-18",
                    "gpt-4o",
                    "gpt-4o-2024-05-13",
                    "gpt-4o-2024-08-06",
                    "gpt-4-turbo",
                    "gpt-4-turbo-2024-04-09",
                    "gpt-4-turbo-preview",
                    "gpt-4-0125-preview",
                    "gpt-4-1106-preview",
                    "gpt-4",
                    "gpt-4-0613",
                    "gpt-3.5-turbo",
                    "gpt-3.5-turbo-0125",
                    "gpt-3.5-turbo-1106",
                    "gpt-3.5-turbo-16k",
                    "gpt-3.5-turbo-0613",
                ]
            ],
            FallbackModels,
        ]
    ]
    semanticCachingEnabled: NotRequired[bool]
    temperature: NotRequired[float]
    knowledgeBase: NotRequired[KnowledgeBase]
    maxTokens: NotRequired[float]
    emotionRecognitionEnabled: NotRequired[bool]
    numFastTurns: NotRequired[float]


class OpenRouterModel(TypedDict):
    messages: NotRequired[List[OpenAIMessage]]
    tools: NotRequired[
        List[
            Union[
                CreateDtmfToolDTO,
                CreateEndCallToolDTO,
                CreateVoicemailToolDTO,
                CreateFunctionToolDTO,
                CreateGhlToolDTO,
                CreateMakeToolDTO,
                CreateTransferCallToolDTO,
            ]
        ]
    ]
    toolIds: NotRequired[List[str]]
    provider: Literal["openrouter"]
    model: str
    temperature: NotRequired[float]
    knowledgeBase: NotRequired[KnowledgeBase]
    maxTokens: NotRequired[float]
    emotionRecognitionEnabled: NotRequired[bool]
    numFastTurns: NotRequired[float]


class PerplexityAIModel(TypedDict):
    messages: NotRequired[List[OpenAIMessage]]
    tools: NotRequired[
        List[
            Union[
                CreateDtmfToolDTO,
                CreateEndCallToolDTO,
                CreateVoicemailToolDTO,
                CreateFunctionToolDTO,
                CreateGhlToolDTO,
                CreateMakeToolDTO,
                CreateTransferCallToolDTO,
            ]
        ]
    ]
    toolIds: NotRequired[List[str]]
    provider: Literal["perplexity-ai"]
    model: str
    temperature: NotRequired[float]
    knowledgeBase: NotRequired[KnowledgeBase]
    maxTokens: NotRequired[float]
    emotionRecognitionEnabled: NotRequired[bool]
    numFastTurns: NotRequired[float]


class TogetherAIModel(TypedDict):
    messages: NotRequired[List[OpenAIMessage]]
    tools: NotRequired[
        List[
            Union[
                CreateDtmfToolDTO,
                CreateEndCallToolDTO,
                CreateVoicemailToolDTO,
                CreateFunctionToolDTO,
                CreateGhlToolDTO,
                CreateMakeToolDTO,
                CreateTransferCallToolDTO,
            ]
        ]
    ]
    toolIds: NotRequired[List[str]]
    provider: Literal["together-ai"]
    model: str
    temperature: NotRequired[float]
    knowledgeBase: NotRequired[KnowledgeBase]
    maxTokens: NotRequired[float]
    emotionRecognitionEnabled: NotRequired[bool]
    numFastTurns: NotRequired[float]


class ExactReplacement(TypedDict):
    type: Literal["exact"]
    key: str
    value: str


class RegexOption(TypedDict):
    type: Literal["ignore-case", "whole-word", "multi-line"]
    enabled: bool


class RegexReplacement(TypedDict):
    type: Literal["regex"]
    regex: str
    options: NotRequired[List[RegexOption]]
    value: str


class FormatPlan(TypedDict):
    enabled: NotRequired[bool]
    numberToDigitsCutoff: NotRequired[float]
    replacements: NotRequired[List[Union[ExactReplacement, RegexReplacement]]]


class PunctuationBoundaries(Enum):
    """
    These are the punctuations that are considered valid boundaries for a chunk to be created.

    Usage:
    - To increase quality, constrain to fewer boundaries.
    - To decrease latency, enable all.

    Default is automatically set to balance the trade-off between quality and latency based on the provider.
    """

    field_ = "。"
    field__1 = "，"
    field__2 = "."
    field__3 = "!"
    field__4 = "?"
    field__5 = ";"
    field__6 = ")"
    field__7 = "،"
    field__8 = "۔"
    field__9 = "।"
    field__10 = "॥"
    field__11 = "|"
    field__ = "||"
    field__12 = ","
    field__13 = ":"


class ChunkPlan(TypedDict):
    enabled: NotRequired[bool]
    minCharacters: NotRequired[float]
    punctuationBoundaries: NotRequired[
        Union[
            List[
                Literal[
                    "。",
                    "，",
                    ".",
                    "!",
                    "?",
                    ";",
                    ")",
                    "،",
                    "۔",
                    "।",
                    "॥",
                    "|",
                    "||",
                    ",",
                    ":",
                ]
            ],
            PunctuationBoundaries,
        ]
    ]
    formatPlan: NotRequired[FormatPlan]


class AzureVoice(TypedDict):
    fillerInjectionEnabled: NotRequired[bool]
    provider: Literal["azure"]
    voiceId: Union[Literal["andrew", "brian", "emma"], str]
    speed: NotRequired[float]
    chunkPlan: NotRequired[ChunkPlan]


class CartesiaVoice(TypedDict):
    fillerInjectionEnabled: NotRequired[bool]
    provider: Literal["cartesia"]
    model: NotRequired[Literal["sonic-english", "sonic-multilingual"]]
    language: NotRequired[Literal["de", "en", "es", "fr", "ja", "pt", "zh"]]
    voiceId: str
    chunkPlan: NotRequired[ChunkPlan]


class DeepgramVoice(TypedDict):
    fillerInjectionEnabled: NotRequired[bool]
    provider: Literal["deepgram"]
    voiceId: Union[
        Literal[
            "asteria",
            "luna",
            "stella",
            "athena",
            "hera",
            "orion",
            "arcas",
            "perseus",
            "angus",
            "orpheus",
            "helios",
            "zeus",
        ],
        str,
    ]
    chunkPlan: NotRequired[ChunkPlan]


class ElevenLabsVoice(TypedDict):
    fillerInjectionEnabled: NotRequired[bool]
    provider: Literal["11labs"]
    voiceId: Union[
        Literal[
            "burt",
            "marissa",
            "andrea",
            "sarah",
            "phillip",
            "steve",
            "joseph",
            "myra",
            "paula",
            "ryan",
            "drew",
            "paul",
            "mrb",
            "matilda",
            "mark",
        ],
        str,
    ]
    stability: NotRequired[float]
    similarityBoost: NotRequired[float]
    style: NotRequired[float]
    useSpeakerBoost: NotRequired[bool]
    optimizeStreamingLatency: NotRequired[float]
    enableSsmlParsing: NotRequired[bool]
    model: NotRequired[
        Literal[
            "eleven_multilingual_v2",
            "eleven_turbo_v2",
            "eleven_turbo_v2_5",
            "eleven_monolingual_v1",
        ]
    ]
    language: NotRequired[str]
    chunkPlan: NotRequired[ChunkPlan]


class LMNTVoice(TypedDict):
    fillerInjectionEnabled: NotRequired[bool]
    provider: Literal["lmnt"]
    voiceId: Union[Literal["lily", "daniel"], str]
    speed: NotRequired[float]
    chunkPlan: NotRequired[ChunkPlan]


class NeetsVoice(TypedDict):
    fillerInjectionEnabled: NotRequired[bool]
    provider: Literal["neets"]
    voiceId: Union[Literal["vits", "vits"], str]
    chunkPlan: NotRequired[ChunkPlan]


class OpenAIVoice(TypedDict):
    fillerInjectionEnabled: NotRequired[bool]
    provider: Literal["openai"]
    voiceId: Union[
        Literal[
            "alloy",
            "echo",
            "fable",
            "onyx",
            "nova",
            "shimmer",
            "alloy",
            "echo",
            "fable",
            "onyx",
            "nova",
            "shimmer",
        ],
        Literal["alloy", "echo", "fable", "onyx", "nova", "shimmer"],
    ]
    speed: NotRequired[float]
    chunkPlan: NotRequired[ChunkPlan]


class PlayHTVoice(TypedDict):
    fillerInjectionEnabled: NotRequired[bool]
    provider: Literal["playht"]
    voiceId: Union[
        Literal[
            "jennifer",
            "melissa",
            "will",
            "chris",
            "matt",
            "jack",
            "ruby",
            "davis",
            "donna",
            "michael",
        ],
        str,
    ]
    speed: NotRequired[float]
    temperature: NotRequired[float]
    emotion: NotRequired[
        Literal[
            "female_happy",
            "female_sad",
            "female_angry",
            "female_fearful",
            "female_disgust",
            "female_surprised",
            "male_happy",
            "male_sad",
            "male_angry",
            "male_fearful",
            "male_disgust",
            "male_surprised",
        ]
    ]
    voiceGuidance: NotRequired[float]
    styleGuidance: NotRequired[float]
    textGuidance: NotRequired[float]
    chunkPlan: NotRequired[ChunkPlan]


class RimeAIVoice(TypedDict):
    fillerInjectionEnabled: NotRequired[bool]
    provider: Literal["rime-ai"]
    voiceId: Union[
        Literal[
            "marsh",
            "bayou",
            "creek",
            "brook",
            "flower",
            "spore",
            "glacier",
            "gulch",
            "alpine",
            "cove",
            "lagoon",
            "tundra",
            "steppe",
            "mesa",
            "grove",
            "rainforest",
            "moraine",
            "wildflower",
            "peak",
            "boulder",
            "abbie",
            "allison",
            "ally",
            "alona",
            "amber",
            "ana",
            "antoine",
            "armon",
            "brenda",
            "brittany",
            "carol",
            "colin",
            "courtney",
            "elena",
            "elliot",
            "eva",
            "geoff",
            "gerald",
            "hank",
            "helen",
            "hera",
            "jen",
            "joe",
            "joy",
            "juan",
            "kendra",
            "kendrick",
            "kenneth",
            "kevin",
            "kris",
            "linda",
            "madison",
            "marge",
            "marina",
            "marissa",
            "marta",
            "maya",
            "nicholas",
            "nyles",
            "phil",
            "reba",
            "rex",
            "rick",
            "ritu",
            "rob",
            "rodney",
            "rohan",
            "rosco",
            "samantha",
            "sandy",
            "selena",
            "seth",
            "sharon",
            "stan",
            "tamra",
            "tanya",
            "tibur",
            "tj",
            "tyler",
            "viv",
            "yadira",
        ],
        str,
    ]
    model: NotRequired[Literal["v1", "mist"]]
    speed: NotRequired[float]
    chunkPlan: NotRequired[ChunkPlan]


class TransportConfigurationTwilio(TypedDict):
    provider: Literal["twilio"]
    timeout: NotRequired[float]
    record: NotRequired[bool]
    recordingChannels: NotRequired[Literal["mono", "dual"]]


class VoicemailDetectionTypes(Enum):
    """
    These are the AMD messages from Twilio that are considered as voicemail. Default is ['machine_end_beep', 'machine_end_silence'].

    @default {Array} ['machine_end_beep', 'machine_end_silence']
    """

    machine_start = "machine_start"
    human = "human"
    fax = "fax"
    unknown = "unknown"
    machine_end_beep = "machine_end_beep"
    machine_end_silence = "machine_end_silence"
    machine_end_other = "machine_end_other"


class TwilioVoicemailDetection(TypedDict):
    provider: Literal["twilio"]
    voicemailDetectionTypes: NotRequired[
        Union[
            List[
                Literal[
                    "machine_start",
                    "human",
                    "fax",
                    "unknown",
                    "machine_end_beep",
                    "machine_end_silence",
                    "machine_end_other",
                ]
            ],
            VoicemailDetectionTypes,
        ]
    ]
    enabled: NotRequired[bool]
    machineDetectionTimeout: NotRequired[float]
    machineDetectionSpeechThreshold: NotRequired[float]
    machineDetectionSpeechEndThreshold: NotRequired[float]
    machineDetectionSilenceTimeout: NotRequired[float]


class SummaryPlan(TypedDict):
    messages: NotRequired[List[Dict[str, Any]]]
    enabled: NotRequired[bool]
    timeoutSeconds: NotRequired[float]


class StructuredDataPlan(TypedDict):
    messages: NotRequired[List[Dict[str, Any]]]
    enabled: NotRequired[bool]
    schema_: NotRequired[JsonSchema]
    timeoutSeconds: NotRequired[float]


class SuccessEvaluationPlan(TypedDict):
    rubric: NotRequired[
        Literal[
            "NumericScale",
            "DescriptiveScale",
            "Checklist",
            "Matrix",
            "PercentageScale",
            "LikertScale",
            "AutomaticRubric",
            "PassFail",
        ]
    ]
    messages: NotRequired[List[Dict[str, Any]]]
    enabled: NotRequired[bool]
    timeoutSeconds: NotRequired[float]


class AnalysisPlan(TypedDict):
    summaryPlan: NotRequired[SummaryPlan]
    structuredDataPlan: NotRequired[StructuredDataPlan]
    successEvaluationPlan: NotRequired[SuccessEvaluationPlan]


class TranscriptPlan(TypedDict):
    enabled: NotRequired[bool]
    assistantName: NotRequired[str]
    userName: NotRequired[str]


class ArtifactPlan(TypedDict):
    recordingEnabled: NotRequired[bool]
    videoRecordingEnabled: NotRequired[bool]
    transcriptPlan: NotRequired[TranscriptPlan]
    recordingPath: NotRequired[str]


class MessagePlan(TypedDict):
    idleMessages: NotRequired[List[str]]
    idleMessageMaxSpokenCount: NotRequired[float]
    idleTimeoutSeconds: NotRequired[float]


class TranscriptionEndpointingPlan(TypedDict):
    onPunctuationSeconds: NotRequired[float]
    onNoPunctuationSeconds: NotRequired[float]
    onNumberSeconds: NotRequired[float]


class StartSpeakingPlan(TypedDict):
    waitSeconds: NotRequired[float]
    smartEndpointingEnabled: NotRequired[bool]
    transcriptionEndpointingPlan: NotRequired[TranscriptionEndpointingPlan]


class StopSpeakingPlan(TypedDict):
    numWords: NotRequired[float]
    voiceSeconds: NotRequired[float]
    backoffSeconds: NotRequired[float]


class MonitorPlan(TypedDict):
    listenEnabled: NotRequired[bool]
    controlEnabled: NotRequired[bool]


class ClientMessages(Enum):
    """
    These are the messages that will be sent to your Client SDKs. Default is conversation-update,function-call,hang,model-output,speech-update,status-update,transcript,tool-calls,user-interrupted,voice-input. You can check the shape of the messages in ClientMessage schema.
    """

    conversation_update = "conversation-update"
    function_call = "function-call"
    function_call_result = "function-call-result"
    hang = "hang"
    language_changed = "language-changed"
    metadata = "metadata"
    model_output = "model-output"
    speech_update = "speech-update"
    status_update = "status-update"
    transcript = "transcript"
    tool_calls = "tool-calls"
    tool_calls_result = "tool-calls-result"
    user_interrupted = "user-interrupted"
    voice_input = "voice-input"


class ServerMessages(Enum):
    """
    These are the messages that will be sent to your Server URL. Default is conversation-update,end-of-call-report,function-call,hang,speech-update,status-update,tool-calls,transfer-destination-request,user-interrupted. You can check the shape of the messages in ServerMessage schema.
    """

    conversation_update = "conversation-update"
    end_of_call_report = "end-of-call-report"
    function_call = "function-call"
    hang = "hang"
    language_changed = "language-changed"
    model_output = "model-output"
    phone_call_control = "phone-call-control"
    speech_update = "speech-update"
    status_update = "status-update"
    transcript = "transcript"
    tool_calls = "tool-calls"
    transfer_destination_request = "transfer-destination-request"
    transfer_update = "transfer-update"
    user_interrupted = "user-interrupted"
    voice_input = "voice-input"


class ImportTwilioPhoneNumberDTO(TypedDict):
    fallbackDestination: NotRequired[
        Union[TransferDestinationNumber, TransferDestinationSip]
    ]
    twilioPhoneNumber: str
    twilioAccountSid: str
    twilioAuthToken: str
    name: NotRequired[str]
    assistantId: NotRequired[str]
    squadId: NotRequired[str]
    serverUrl: NotRequired[str]
    serverUrlSecret: NotRequired[str]


class CreateCustomerDTO(TypedDict):
    numberE164CheckEnabled: NotRequired[bool]
    extension: NotRequired[str]
    number: NotRequired[str]
    sipUri: NotRequired[str]
    name: NotRequired[str]


class AnalysisCostBreakdown(TypedDict):
    summary: NotRequired[float]
    summaryPromptTokens: NotRequired[float]
    summaryCompletionTokens: NotRequired[float]
    structuredData: NotRequired[float]
    structuredDataPromptTokens: NotRequired[float]
    structuredDataCompletionTokens: NotRequired[float]
    successEvaluation: NotRequired[float]
    successEvaluationPromptTokens: NotRequired[float]
    successEvaluationCompletionTokens: NotRequired[float]


class CostBreakdown(TypedDict):
    transport: NotRequired[float]
    stt: NotRequired[float]
    llm: NotRequired[float]
    tts: NotRequired[float]
    vapi: NotRequired[float]
    total: NotRequired[float]
    llmPromptTokens: NotRequired[float]
    llmCompletionTokens: NotRequired[float]
    ttsCharacters: NotRequired[float]
    analysisCostBreakdown: NotRequired[AnalysisCostBreakdown]


class Analysis(TypedDict):
    summary: NotRequired[str]
    structuredData: NotRequired[Dict[str, Any]]
    successEvaluation: NotRequired[str]


class Monitor(TypedDict):
    listenUrl: NotRequired[str]
    controlUrl: NotRequired[str]


class PaginationMeta(TypedDict):
    itemsPerPage: float
    totalItems: float
    currentPage: float


class UpdateCallDTO(TypedDict):
    name: NotRequired[str]


class ByoPhoneNumber(TypedDict):
    fallbackDestination: NotRequired[
        Union[TransferDestinationNumber, TransferDestinationSip]
    ]
    provider: Literal["byo-phone-number"]
    numberE164CheckEnabled: NotRequired[bool]
    id: str
    orgId: str
    createdAt: str
    updatedAt: str
    name: NotRequired[str]
    assistantId: NotRequired[str]
    squadId: NotRequired[str]
    serverUrl: NotRequired[str]
    serverUrlSecret: NotRequired[str]
    number: NotRequired[str]
    credentialId: str


class TwilioPhoneNumber(TypedDict):
    fallbackDestination: NotRequired[
        Union[TransferDestinationNumber, TransferDestinationSip]
    ]
    provider: Literal["twilio"]
    id: str
    orgId: str
    createdAt: str
    updatedAt: str
    name: NotRequired[str]
    assistantId: NotRequired[str]
    squadId: NotRequired[str]
    serverUrl: NotRequired[str]
    serverUrlSecret: NotRequired[str]
    number: str
    twilioAccountSid: str
    twilioAuthToken: str


class VonagePhoneNumber(TypedDict):
    fallbackDestination: NotRequired[
        Union[TransferDestinationNumber, TransferDestinationSip]
    ]
    provider: Literal["vonage"]
    id: str
    orgId: str
    createdAt: str
    updatedAt: str
    name: NotRequired[str]
    assistantId: NotRequired[str]
    squadId: NotRequired[str]
    serverUrl: NotRequired[str]
    serverUrlSecret: NotRequired[str]
    number: str
    credentialId: str


class VapiPhoneNumber(TypedDict):
    fallbackDestination: NotRequired[
        Union[TransferDestinationNumber, TransferDestinationSip]
    ]
    provider: Literal["vapi"]
    id: str
    orgId: str
    createdAt: str
    updatedAt: str
    name: NotRequired[str]
    assistantId: NotRequired[str]
    squadId: NotRequired[str]
    serverUrl: NotRequired[str]
    serverUrlSecret: NotRequired[str]
    sipUri: str


class CreateByoPhoneNumberDTO(TypedDict):
    fallbackDestination: NotRequired[
        Union[TransferDestinationNumber, TransferDestinationSip]
    ]
    provider: Literal["byo-phone-number"]
    numberE164CheckEnabled: NotRequired[bool]
    number: NotRequired[str]
    credentialId: str
    name: NotRequired[str]
    assistantId: NotRequired[str]
    squadId: NotRequired[str]
    serverUrl: NotRequired[str]
    serverUrlSecret: NotRequired[str]


class CreateTwilioPhoneNumberDTO(TypedDict):
    fallbackDestination: NotRequired[
        Union[TransferDestinationNumber, TransferDestinationSip]
    ]
    provider: Literal["twilio"]
    number: str
    twilioAccountSid: str
    twilioAuthToken: str
    name: NotRequired[str]
    assistantId: NotRequired[str]
    squadId: NotRequired[str]
    serverUrl: NotRequired[str]
    serverUrlSecret: NotRequired[str]


class CreateVonagePhoneNumberDTO(TypedDict):
    fallbackDestination: NotRequired[
        Union[TransferDestinationNumber, TransferDestinationSip]
    ]
    provider: Literal["vonage"]
    number: str
    credentialId: str
    name: NotRequired[str]
    assistantId: NotRequired[str]
    squadId: NotRequired[str]
    serverUrl: NotRequired[str]
    serverUrlSecret: NotRequired[str]


class CreateVapiPhoneNumberDTO(TypedDict):
    fallbackDestination: NotRequired[
        Union[TransferDestinationNumber, TransferDestinationSip]
    ]
    provider: Literal["vapi"]
    sipUri: str
    name: NotRequired[str]
    assistantId: NotRequired[str]
    squadId: NotRequired[str]
    serverUrl: NotRequired[str]
    serverUrlSecret: NotRequired[str]


class BuyPhoneNumberDTO(TypedDict):
    fallbackDestination: NotRequired[
        Union[TransferDestinationNumber, TransferDestinationSip]
    ]
    areaCode: str
    name: NotRequired[str]
    assistantId: NotRequired[str]
    squadId: NotRequired[str]
    serverUrl: NotRequired[str]
    serverUrlSecret: NotRequired[str]


class ImportVonagePhoneNumberDTO(TypedDict):
    fallbackDestination: NotRequired[
        Union[TransferDestinationNumber, TransferDestinationSip]
    ]
    vonagePhoneNumber: str
    credentialId: str
    name: NotRequired[str]
    assistantId: NotRequired[str]
    squadId: NotRequired[str]
    serverUrl: NotRequired[str]
    serverUrlSecret: NotRequired[str]


class UpdatePhoneNumberDTO(TypedDict):
    fallbackDestination: NotRequired[
        Union[TransferDestinationNumber, TransferDestinationSip]
    ]
    name: NotRequired[str]
    assistantId: NotRequired[str]
    squadId: NotRequired[str]
    serverUrl: NotRequired[str]
    serverUrlSecret: NotRequired[str]


class RuleBasedCondition(TypedDict):
    type: Literal["rule-based"]
    operator: Literal["eq", "neq", "gt", "gte", "lt", "lte"]
    leftSide: str
    rightSide: str


class ModelBasedCondition(TypedDict):
    type: Literal["model-based"]
    instruction: str


class BlockStartMessage(TypedDict):
    conditions: NotRequired[List[Union[ModelBasedCondition, RuleBasedCondition]]]
    type: Literal["block-start"]
    content: str


class BlockCompleteMessage(TypedDict):
    conditions: NotRequired[List[Union[ModelBasedCondition, RuleBasedCondition]]]
    type: Literal["block-complete"]
    content: str


class CreateConversationBlockDTO(TypedDict):
    messages: NotRequired[List[Union[BlockStartMessage, BlockCompleteMessage]]]
    inputSchema: NotRequired[JsonSchema]
    outputSchema: NotRequired[JsonSchema]
    type: Literal["conversation"]
    instruction: str
    name: NotRequired[str]


class CreateToolCallBlockDTO(TypedDict):
    messages: NotRequired[List[Union[BlockStartMessage, BlockCompleteMessage]]]
    inputSchema: NotRequired[JsonSchema]
    outputSchema: NotRequired[JsonSchema]
    type: Literal["tool-call"]
    tool: NotRequired[
        Union[
            CreateDtmfToolDTO,
            CreateEndCallToolDTO,
            CreateVoicemailToolDTO,
            CreateFunctionToolDTO,
            CreateGhlToolDTO,
            CreateMakeToolDTO,
            CreateTransferCallToolDTO,
        ]
    ]
    toolId: NotRequired[str]
    name: NotRequired[str]


class StepDestination(TypedDict):
    type: Literal["step"]
    conditions: NotRequired[List[Union[ModelBasedCondition, RuleBasedCondition]]]
    stepName: str


class AssignmentMutation(TypedDict):
    conditions: NotRequired[List[Union[ModelBasedCondition, RuleBasedCondition]]]
    type: Literal["assignment"]
    variable: str
    value: str


DtmfTool = TypedDict(
    "DtmfTool",
    {
        "async": NotRequired[bool],
        "messages": NotRequired[
            List[
                Union[
                    ToolMessageStart,
                    ToolMessageComplete,
                    ToolMessageFailed,
                    ToolMessageDelayed,
                ]
            ]
        ],
        "type": Literal["dtmf"],
        "id": str,
        "orgId": str,
        "createdAt": str,
        "updatedAt": str,
        "function": NotRequired[OpenAIFunction],
        "server": NotRequired[Server],
    },
)


EndCallTool = TypedDict(
    "EndCallTool",
    {
        "async": NotRequired[bool],
        "messages": NotRequired[
            List[
                Union[
                    ToolMessageStart,
                    ToolMessageComplete,
                    ToolMessageFailed,
                    ToolMessageDelayed,
                ]
            ]
        ],
        "type": Literal["endCall"],
        "id": str,
        "orgId": str,
        "createdAt": str,
        "updatedAt": str,
        "function": NotRequired[OpenAIFunction],
        "server": NotRequired[Server],
    },
)


FunctionTool = TypedDict(
    "FunctionTool",
    {
        "async": NotRequired[bool],
        "messages": NotRequired[
            List[
                Union[
                    ToolMessageStart,
                    ToolMessageComplete,
                    ToolMessageFailed,
                    ToolMessageDelayed,
                ]
            ]
        ],
        "type": Literal["function"],
        "id": str,
        "orgId": str,
        "createdAt": str,
        "updatedAt": str,
        "function": NotRequired[OpenAIFunction],
        "server": NotRequired[Server],
    },
)


GhlTool = TypedDict(
    "GhlTool",
    {
        "async": NotRequired[bool],
        "messages": NotRequired[
            List[
                Union[
                    ToolMessageStart,
                    ToolMessageComplete,
                    ToolMessageFailed,
                    ToolMessageDelayed,
                ]
            ]
        ],
        "type": Literal["ghl"],
        "id": str,
        "orgId": str,
        "createdAt": str,
        "updatedAt": str,
        "function": NotRequired[OpenAIFunction],
        "server": NotRequired[Server],
        "metadata": GhlToolMetadata,
    },
)


MakeTool = TypedDict(
    "MakeTool",
    {
        "async": NotRequired[bool],
        "messages": NotRequired[
            List[
                Union[
                    ToolMessageStart,
                    ToolMessageComplete,
                    ToolMessageFailed,
                    ToolMessageDelayed,
                ]
            ]
        ],
        "type": Literal["make"],
        "id": str,
        "orgId": str,
        "createdAt": str,
        "updatedAt": str,
        "function": NotRequired[OpenAIFunction],
        "server": NotRequired[Server],
        "metadata": MakeToolMetadata,
    },
)


TransferCallTool = TypedDict(
    "TransferCallTool",
    {
        "async": NotRequired[bool],
        "messages": NotRequired[
            List[
                Union[
                    ToolMessageStart,
                    ToolMessageComplete,
                    ToolMessageFailed,
                    ToolMessageDelayed,
                ]
            ]
        ],
        "type": Literal["transferCall"],
        "destinations": NotRequired[
            List[
                Union[
                    TransferDestinationAssistant,
                    TransferDestinationStep,
                    TransferDestinationNumber,
                    TransferDestinationSip,
                ]
            ]
        ],
        "id": str,
        "orgId": str,
        "createdAt": str,
        "updatedAt": str,
        "function": NotRequired[OpenAIFunction],
        "server": NotRequired[Server],
    },
)


OutputTool = TypedDict(
    "OutputTool",
    {
        "async": NotRequired[bool],
        "messages": NotRequired[
            List[
                Union[
                    ToolMessageStart,
                    ToolMessageComplete,
                    ToolMessageFailed,
                    ToolMessageDelayed,
                ]
            ]
        ],
        "type": Literal["output"],
        "id": str,
        "orgId": str,
        "createdAt": str,
        "updatedAt": str,
        "function": NotRequired[OpenAIFunction],
        "server": NotRequired[Server],
    },
)


CreateOutputToolDTO = TypedDict(
    "CreateOutputToolDTO",
    {
        "async": NotRequired[bool],
        "messages": NotRequired[
            List[
                Union[
                    ToolMessageStart,
                    ToolMessageComplete,
                    ToolMessageFailed,
                    ToolMessageDelayed,
                ]
            ]
        ],
        "type": Literal["output"],
        "function": NotRequired[OpenAIFunction],
        "server": NotRequired[Server],
    },
)


UpdateToolDTO = TypedDict(
    "UpdateToolDTO",
    {
        "async": NotRequired[bool],
        "messages": NotRequired[
            List[
                Union[
                    ToolMessageStart,
                    ToolMessageComplete,
                    ToolMessageFailed,
                    ToolMessageDelayed,
                ]
            ]
        ],
        "function": NotRequired[OpenAIFunction],
        "server": NotRequired[Server],
    },
)


class CreateFileDTO(TypedDict):
    file: bytes


class File(TypedDict):
    object: NotRequired[Literal["file"]]
    status: NotRequired[Literal["indexed", "not_indexed"]]
    name: NotRequired[str]
    originalName: NotRequired[str]
    bytes: NotRequired[float]
    purpose: NotRequired[str]
    mimetype: NotRequired[str]
    key: NotRequired[str]
    path: NotRequired[str]
    bucket: NotRequired[str]
    url: NotRequired[str]
    metadata: NotRequired[Dict[str, Any]]
    id: str
    orgId: str
    createdAt: str
    updatedAt: str


class UpdateFileDTO(UpdateCallDTO):
    pass


class Metrics(TypedDict):
    orgId: str
    rangeStart: str
    rangeEnd: str
    bill: float
    billWithinBillingLimit: bool
    billDailyBreakdown: Dict[str, Any]
    callActive: float
    callActiveWithinConcurrencyLimit: bool
    callMinutes: float
    callMinutesDailyBreakdown: Dict[str, Any]
    callMinutesAverage: float
    callMinutesAverageDailyBreakdown: Dict[str, Any]
    callCount: float
    callCountDailyBreakdown: Dict[str, Any]


class TimeRange(TypedDict):
    step: NotRequired[
        Literal[
            "minute",
            "hour",
            "day",
            "week",
            "month",
            "quarter",
            "year",
            "decade",
            "century",
            "millennium",
        ]
    ]
    start: NotRequired[str]
    end: NotRequired[str]
    timezone: NotRequired[str]


class AnalyticsOperation(TypedDict):
    operation: Literal["sum", "avg", "count", "min", "max"]
    column: Literal[
        "id",
        "cost",
        "costBreakdown.llm",
        "costBreakdown.stt",
        "costBreakdown.tts",
        "costBreakdown.vapi",
        "costBreakdown.ttsCharacters",
        "costBreakdown.llmPromptTokens",
        "costBreakdown.llmCompletionTokens",
        "duration",
    ]
    alias: NotRequired[str]


class GroupBy(Enum):
    """
    This is the list of columns you want to group by.
    """

    type = "type"
    assistantId = "assistantId"
    endedReason = "endedReason"
    analysis_successEvaluation = "analysis.successEvaluation"
    status = "status"


class AnalyticsQuery(TypedDict):
    table: Literal["call"]
    groupBy: NotRequired[
        Union[
            List[
                Literal[
                    "type",
                    "assistantId",
                    "endedReason",
                    "analysis.successEvaluation",
                    "status",
                ]
            ],
            GroupBy,
        ]
    ]
    name: str
    timeRange: NotRequired[TimeRange]
    operations: List[AnalyticsOperation]


class AnalyticsQueryDTO(TypedDict):
    queries: List[AnalyticsQuery]


class AnalyticsQueryResult(TypedDict):
    name: str
    timeRange: TimeRange
    result: List[Dict[str, Any]]


class Error(TypedDict):
    message: str


class Log(TypedDict):
    time: float
    orgId: str
    type: Literal["API", "Webhook", "Call", "Provider"]
    resource: NotRequired[
        Literal[
            "assistant",
            "phone-number",
            "tool",
            "squad",
            "call",
            "file",
            "metric",
            "log",
        ]
    ]
    requestDurationSeconds: float
    requestStartedAt: str
    requestFinishedAt: str
    requestBody: Dict[str, Any]
    requestHttpMethod: Literal["POST", "GET", "PUT", "PATCH", "DELETE"]
    requestUrl: str
    requestPath: str
    requestQuery: NotRequired[str]
    responseHttpCode: float
    requestIpAddress: NotRequired[str]
    requestOrigin: NotRequired[str]
    responseBody: NotRequired[Dict[str, Any]]
    requestHeaders: NotRequired[Dict[str, Any]]
    error: NotRequired[Error]
    assistantId: NotRequired[str]
    phoneNumberId: NotRequired[str]
    customerId: NotRequired[str]
    squadId: NotRequired[str]
    callId: NotRequired[str]


class LogsPaginatedResponse(TypedDict):
    results: List[Log]
    metadata: PaginationMeta


class AnyscaleCredential(TypedDict):
    provider: Literal["anyscale"]
    apiKey: str
    id: str
    orgId: str
    createdAt: str
    updatedAt: str


class AnthropicCredential(TypedDict):
    provider: Literal["anthropic"]
    apiKey: str
    id: str
    orgId: str
    createdAt: str
    updatedAt: str


class Models(Enum):
    gpt_4o_mini_2024_07_18 = "gpt-4o-mini-2024-07-18"
    gpt_4o_2024_05_13 = "gpt-4o-2024-05-13"
    gpt_4_turbo_2024_04_09 = "gpt-4-turbo-2024-04-09"
    gpt_4_0125_preview = "gpt-4-0125-preview"
    gpt_4_1106_preview = "gpt-4-1106-preview"
    gpt_4_0613 = "gpt-4-0613"
    gpt_35_turbo_0125 = "gpt-35-turbo-0125"
    gpt_35_turbo_1106 = "gpt-35-turbo-1106"


class AzureOpenAICredential(TypedDict):
    provider: Literal["azure-openai"]
    region: Literal[
        "australia",
        "canada",
        "eastus2",
        "eastus",
        "france",
        "india",
        "japan",
        "northcentralus",
        "norway",
        "southcentralus",
        "sweden",
        "switzerland",
        "uk",
        "westus",
        "westus3",
    ]
    models: Union[
        List[
            Literal[
                "gpt-4o-mini-2024-07-18",
                "gpt-4o-2024-05-13",
                "gpt-4-turbo-2024-04-09",
                "gpt-4-0125-preview",
                "gpt-4-1106-preview",
                "gpt-4-0613",
                "gpt-35-turbo-0125",
                "gpt-35-turbo-1106",
            ]
        ],
        Models,
    ]
    openAIKey: str
    id: str
    orgId: str
    createdAt: str
    updatedAt: str
    openAIEndpoint: str


class SipTrunkGateway(TypedDict):
    ip: str
    port: NotRequired[float]
    netmask: NotRequired[float]
    inboundEnabled: NotRequired[bool]
    outboundEnabled: NotRequired[bool]
    outboundProtocol: NotRequired[Literal["tls/srtp", "tcp", "tls", "udp"]]
    optionsPingEnabled: NotRequired[bool]


class SipTrunkOutboundSipRegisterPlan(TypedDict):
    domain: NotRequired[str]
    username: NotRequired[str]
    realm: NotRequired[str]


class SipTrunkOutboundAuthenticationPlan(TypedDict):
    authPassword: NotRequired[str]
    authUsername: NotRequired[str]
    sipRegisterPlan: NotRequired[SipTrunkOutboundSipRegisterPlan]


class SbcConfiguration(TypedDict):
    pass


class ByoSipTrunkCredential(TypedDict):
    provider: NotRequired[Literal["byo-sip-trunk"]]
    id: str
    orgId: str
    createdAt: str
    updatedAt: str
    gateways: List[SipTrunkGateway]
    name: NotRequired[str]
    outboundAuthenticationPlan: NotRequired[SipTrunkOutboundAuthenticationPlan]
    outboundLeadingPlusEnabled: NotRequired[bool]
    sbcConfiguration: NotRequired[SbcConfiguration]


class CartesiaCredential(TypedDict):
    provider: Literal["cartesia"]
    apiKey: str
    id: str
    orgId: str
    createdAt: str
    updatedAt: str


class CustomLLMCredential(TypedDict):
    provider: Literal["custom-llm"]
    apiKey: str
    id: str
    orgId: str
    createdAt: str
    updatedAt: str


class DeepgramCredential(TypedDict):
    provider: Literal["deepgram"]
    apiKey: str
    id: str
    orgId: str
    createdAt: str
    updatedAt: str
    apiUrl: NotRequired[str]


class GcpKey(TypedDict):
    type: str
    projectId: str
    privateKeyId: str
    privateKey: str
    clientEmail: str
    clientId: str
    authUri: str
    tokenUri: str
    authProviderX509CertUrl: str
    clientX509CertUrl: str
    universeDomain: str


class BucketPlan(TypedDict):
    name: str
    region: NotRequired[str]
    path: NotRequired[str]
    hmacAccessKey: NotRequired[str]
    hmacSecret: NotRequired[str]


class GcpCredential(TypedDict):
    provider: Literal["gcp"]
    id: str
    orgId: str
    createdAt: str
    updatedAt: str
    name: NotRequired[str]
    gcpKey: GcpKey
    bucketPlan: NotRequired[BucketPlan]


class GladiaCredential(TypedDict):
    provider: Literal["gladia"]
    apiKey: str
    id: str
    orgId: str
    createdAt: str
    updatedAt: str


class DeepInfraCredential(TypedDict):
    provider: Literal["deepinfra"]
    apiKey: str
    id: str
    orgId: str
    createdAt: str
    updatedAt: str


class ElevenLabsCredential(TypedDict):
    provider: Literal["11labs"]
    apiKey: str
    id: str
    orgId: str
    createdAt: str
    updatedAt: str


class GoHighLevelCredential(TypedDict):
    provider: Literal["gohighlevel"]
    apiKey: str
    id: str
    orgId: str
    createdAt: str
    updatedAt: str


class GroqCredential(TypedDict):
    provider: Literal["groq"]
    apiKey: str
    id: str
    orgId: str
    createdAt: str
    updatedAt: str


class LmntCredential(TypedDict):
    provider: Literal["lmnt"]
    apiKey: str
    id: str
    orgId: str
    createdAt: str
    updatedAt: str


class MakeCredential(TypedDict):
    provider: Literal["make"]
    teamId: str
    region: str
    apiKey: str
    id: str
    orgId: str
    createdAt: str
    updatedAt: str


class OpenAICredential(TypedDict):
    provider: Literal["openai"]
    apiKey: str
    id: str
    orgId: str
    createdAt: str
    updatedAt: str


class OpenRouterCredential(TypedDict):
    provider: Literal["openrouter"]
    apiKey: str
    id: str
    orgId: str
    createdAt: str
    updatedAt: str


class PerplexityAICredential(TypedDict):
    provider: Literal["perplexity-ai"]
    apiKey: str
    id: str
    orgId: str
    createdAt: str
    updatedAt: str


class PlayHTCredential(TypedDict):
    provider: Literal["playht"]
    apiKey: str
    id: str
    orgId: str
    createdAt: str
    updatedAt: str
    userId: str


class RimeAICredential(TypedDict):
    provider: Literal["rime-ai"]
    apiKey: str
    id: str
    orgId: str
    createdAt: str
    updatedAt: str


class RunpodCredential(TypedDict):
    provider: Literal["runpod"]
    apiKey: str
    id: str
    orgId: str
    createdAt: str
    updatedAt: str


class S3Credential(TypedDict):
    provider: Literal["s3"]
    awsAccessKeyId: str
    awsSecretAccessKey: str
    region: str
    s3BucketName: str
    s3PathPrefix: str
    id: str
    orgId: str
    createdAt: str
    updatedAt: str


class TogetherAICredential(TypedDict):
    provider: Literal["together-ai"]
    apiKey: str
    id: str
    orgId: str
    createdAt: str
    updatedAt: str


class TwilioCredential(TypedDict):
    provider: Literal["twilio"]
    authToken: str
    id: str
    orgId: str
    createdAt: str
    updatedAt: str
    accountSid: str


class VonageCredential(TypedDict):
    vonageApplicationPrivateKey: str
    provider: Literal["vonage"]
    apiSecret: str
    id: str
    orgId: str
    createdAt: str
    updatedAt: str
    vonageApplicationId: str
    apiKey: str


class CreateAnyscaleCredentialDTO(TypedDict):
    provider: Literal["anyscale"]
    apiKey: str


class CreateAnthropicCredentialDTO(TypedDict):
    provider: Literal["anthropic"]
    apiKey: str


class CreateAzureOpenAICredentialDTO(TypedDict):
    provider: Literal["azure-openai"]
    region: Literal[
        "australia",
        "canada",
        "eastus2",
        "eastus",
        "france",
        "india",
        "japan",
        "northcentralus",
        "norway",
        "southcentralus",
        "sweden",
        "switzerland",
        "uk",
        "westus",
        "westus3",
    ]
    models: Union[
        List[
            Literal[
                "gpt-4o-mini-2024-07-18",
                "gpt-4o-2024-05-13",
                "gpt-4-turbo-2024-04-09",
                "gpt-4-0125-preview",
                "gpt-4-1106-preview",
                "gpt-4-0613",
                "gpt-35-turbo-0125",
                "gpt-35-turbo-1106",
            ]
        ],
        Models,
    ]
    openAIKey: str
    openAIEndpoint: str


class CreateByoSipTrunkCredentialDTO(TypedDict):
    provider: NotRequired[Literal["byo-sip-trunk"]]
    gateways: List[SipTrunkGateway]
    name: NotRequired[str]
    outboundAuthenticationPlan: NotRequired[SipTrunkOutboundAuthenticationPlan]
    outboundLeadingPlusEnabled: NotRequired[bool]
    sbcConfiguration: NotRequired[SbcConfiguration]


class CreateCartesiaCredentialDTO(TypedDict):
    provider: Literal["cartesia"]
    apiKey: str


class CreateCustomLLMCredentialDTO(TypedDict):
    provider: Literal["custom-llm"]
    apiKey: str


class CreateDeepgramCredentialDTO(TypedDict):
    provider: Literal["deepgram"]
    apiKey: str
    apiUrl: NotRequired[str]


class CreateGcpCredentialDTO(TypedDict):
    provider: Literal["gcp"]
    name: NotRequired[str]
    gcpKey: GcpKey
    bucketPlan: NotRequired[BucketPlan]


class CreateGladiaCredentialDTO(TypedDict):
    provider: Literal["gladia"]
    apiKey: str


class CreateDeepInfraCredentialDTO(TypedDict):
    provider: Literal["deepinfra"]
    apiKey: str


class CreateElevenLabsCredentialDTO(TypedDict):
    provider: Literal["11labs"]
    apiKey: str


class CreateGoHighLevelCredentialDTO(TypedDict):
    provider: Literal["gohighlevel"]
    apiKey: str


class CreateGroqCredentialDTO(TypedDict):
    provider: Literal["groq"]
    apiKey: str


class CreateLmntCredentialDTO(TypedDict):
    provider: Literal["lmnt"]
    apiKey: str


class CreateMakeCredentialDTO(TypedDict):
    provider: Literal["make"]
    teamId: str
    region: str
    apiKey: str


class CreateOpenAICredentialDTO(TypedDict):
    provider: Literal["openai"]
    apiKey: str


class CreateOpenRouterCredentialDTO(TypedDict):
    provider: Literal["openrouter"]
    apiKey: str


class CreatePerplexityAICredentialDTO(TypedDict):
    provider: Literal["perplexity-ai"]
    apiKey: str


class CreatePlayHTCredentialDTO(TypedDict):
    provider: Literal["playht"]
    apiKey: str
    userId: str


class CreateRimeAICredentialDTO(TypedDict):
    provider: Literal["rime-ai"]
    apiKey: str


class CreateRunpodCredentialDTO(TypedDict):
    provider: Literal["runpod"]
    apiKey: str


class CreateS3CredentialDTO(TypedDict):
    provider: Literal["s3"]
    awsAccessKeyId: str
    awsSecretAccessKey: str
    region: str
    s3BucketName: str
    s3PathPrefix: str


class CreateTogetherAICredentialDTO(TypedDict):
    provider: Literal["together-ai"]
    apiKey: str


class CreateTwilioCredentialDTO(TypedDict):
    provider: Literal["twilio"]
    authToken: str
    accountSid: str


class CreateVonageCredentialDTO(TypedDict):
    provider: Literal["vonage"]
    apiSecret: str
    apiKey: str


class UpdateAnyscaleCredentialDTO(CreateAnyscaleCredentialDTO):
    pass


class UpdateAnthropicCredentialDTO(CreateAnthropicCredentialDTO):
    pass


class UpdateAzureOpenAICredentialDTO(CreateAzureOpenAICredentialDTO):
    pass


class UpdateByoSipTrunkCredentialDTO(CreateByoSipTrunkCredentialDTO):
    pass


class UpdateCartesiaCredentialDTO(CreateCartesiaCredentialDTO):
    pass


class UpdateCustomLLMCredentialDTO(CreateCustomLLMCredentialDTO):
    pass


class UpdateDeepInfraCredentialDTO(CreateDeepInfraCredentialDTO):
    pass


class UpdateDeepgramCredentialDTO(CreateDeepgramCredentialDTO):
    pass


class UpdateGcpCredentialDTO(CreateGcpCredentialDTO):
    pass


class UpdateGladiaCredentialDTO(CreateGladiaCredentialDTO):
    pass


class UpdateElevenLabsCredentialDTO(CreateElevenLabsCredentialDTO):
    pass


class UpdateGoHighLevelCredentialDTO(CreateGoHighLevelCredentialDTO):
    pass


class UpdateGroqCredentialDTO(CreateGroqCredentialDTO):
    pass


class UpdateLmntCredentialDTO(CreateLmntCredentialDTO):
    pass


class UpdateMakeCredentialDTO(CreateMakeCredentialDTO):
    pass


class UpdateOpenAICredentialDTO(CreateOpenAICredentialDTO):
    pass


class UpdateOpenRouterCredentialDTO(CreateOpenRouterCredentialDTO):
    pass


class UpdatePerplexityAICredentialDTO(CreatePerplexityAICredentialDTO):
    pass


class UpdatePlayHTCredentialDTO(CreatePlayHTCredentialDTO):
    pass


class UpdateRimeAICredentialDTO(CreateRimeAICredentialDTO):
    pass


class UpdateRunpodCredentialDTO(CreateRunpodCredentialDTO):
    pass


class UpdateS3CredentialDTO(CreateS3CredentialDTO):
    pass


class UpdateTogetherAICredentialDTO(CreateTogetherAICredentialDTO):
    pass


class UpdateTwilioCredentialDTO(CreateTwilioCredentialDTO):
    pass


class UpdateVonageCredentialDTO(CreateVonageCredentialDTO):
    pass


class CreateOrgDTO(TypedDict):
    hipaaEnabled: NotRequired[bool]
    name: NotRequired[str]
    billingLimit: NotRequired[float]
    serverUrl: NotRequired[str]
    serverUrlSecret: NotRequired[str]
    concurrencyLimit: NotRequired[float]


class OrgPlan(TypedDict):
    includedProviders: NotRequired[List[Dict[str, Any]]]
    includedMinutes: NotRequired[float]
    costPerOverageMinute: NotRequired[float]


class Org(TypedDict):
    hipaaEnabled: NotRequired[bool]
    id: str
    createdAt: str
    updatedAt: str
    stripeCustomerId: NotRequired[str]
    stripeSubscriptionId: NotRequired[str]
    stripeSubscriptionItemId: NotRequired[str]
    stripeSubscriptionCurrentPeriodStart: NotRequired[str]
    stripeSubscriptionStatus: NotRequired[str]
    plan: NotRequired[OrgPlan]
    name: NotRequired[str]
    billingLimit: NotRequired[float]
    serverUrl: NotRequired[str]
    serverUrlSecret: NotRequired[str]
    concurrencyLimit: NotRequired[float]


class UpdateOrgDTO(CreateOrgDTO):
    pass


class User(TypedDict):
    id: str
    createdAt: str
    updatedAt: str
    email: str
    fullName: NotRequired[str]


class InviteUserDTO(TypedDict):
    email: str
    role: Literal["admin", "editor", "viewer"]


class UpdateUserRoleDTO(TypedDict):
    userId: str
    role: Literal["admin", "editor", "viewer"]


class VoiceLibraryVoiceResponse(TypedDict):
    voiceId: str
    name: str
    publicOwnerId: NotRequired[str]
    description: NotRequired[str]
    gender: NotRequired[str]
    age: NotRequired[Dict[str, Any]]
    accent: NotRequired[str]


class AddVoiceToProviderDTO(TypedDict):
    ownerId: str
    voiceId: str
    name: str


class VoiceLibrary(TypedDict):
    provider: NotRequired[Dict[str, Any]]
    providerId: NotRequired[str]
    slug: NotRequired[str]
    name: NotRequired[str]
    language: NotRequired[str]
    languageCode: NotRequired[str]
    model: NotRequired[str]
    supportedModels: NotRequired[str]
    gender: NotRequired[Literal["male", "female"]]
    accent: NotRequired[str]
    previewUrl: NotRequired[str]
    description: NotRequired[str]
    credentialId: NotRequired[str]
    id: str
    orgId: str
    isPublic: bool
    isDeleted: bool
    createdAt: str
    updatedAt: str


class CloneVoiceDTO(TypedDict):
    name: str
    description: NotRequired[str]
    labels: NotRequired[str]
    files: List[bytes]


class ToolTemplateSetup(TypedDict):
    title: str
    description: NotRequired[str]
    videoUrl: NotRequired[str]
    docsUrl: NotRequired[str]


class MakeToolProviderDetails(TypedDict):
    templateUrl: NotRequired[str]
    setupInstructions: NotRequired[List[ToolTemplateSetup]]
    type: Literal["make"]
    scenarioId: NotRequired[float]
    scenarioName: NotRequired[str]
    triggerHookId: NotRequired[float]
    triggerHookName: NotRequired[str]


class GhlToolProviderDetails(TypedDict):
    templateUrl: NotRequired[str]
    setupInstructions: NotRequired[List[ToolTemplateSetup]]
    type: Literal["ghl"]
    workflowId: NotRequired[str]
    workflowName: NotRequired[str]
    webhookHookId: NotRequired[str]
    webhookHookName: NotRequired[str]
    locationId: NotRequired[str]


class FunctionToolProviderDetails(TypedDict):
    templateUrl: NotRequired[str]
    setupInstructions: NotRequired[List[ToolTemplateSetup]]
    type: Literal["function"]


class ToolTemplateMetadata(TypedDict):
    collectionType: NotRequired[str]
    collectionId: NotRequired[str]
    collectionName: NotRequired[str]


class CreateToolTemplateDTO(TypedDict):
    details: NotRequired[
        Union[
            CreateDtmfToolDTO,
            CreateEndCallToolDTO,
            CreateVoicemailToolDTO,
            CreateFunctionToolDTO,
            CreateGhlToolDTO,
            CreateMakeToolDTO,
            CreateTransferCallToolDTO,
        ]
    ]
    providerDetails: NotRequired[
        Union[
            MakeToolProviderDetails, GhlToolProviderDetails, FunctionToolProviderDetails
        ]
    ]
    metadata: NotRequired[ToolTemplateMetadata]
    visibility: NotRequired[Literal["public", "private"]]
    type: Literal["tool"]
    name: NotRequired[str]
    provider: NotRequired[Literal["make", "gohighlevel", "function"]]


class Template(TypedDict):
    details: NotRequired[
        Union[
            CreateDtmfToolDTO,
            CreateEndCallToolDTO,
            CreateVoicemailToolDTO,
            CreateFunctionToolDTO,
            CreateGhlToolDTO,
            CreateMakeToolDTO,
            CreateTransferCallToolDTO,
        ]
    ]
    providerDetails: NotRequired[
        Union[
            MakeToolProviderDetails, GhlToolProviderDetails, FunctionToolProviderDetails
        ]
    ]
    metadata: NotRequired[ToolTemplateMetadata]
    visibility: NotRequired[Literal["public", "private"]]
    type: Literal["tool"]
    name: NotRequired[str]
    provider: NotRequired[Literal["make", "gohighlevel", "function"]]
    id: str
    orgId: str
    createdAt: str
    updatedAt: str


class UpdateToolTemplateDTO(CreateToolTemplateDTO):
    pass


class TokenRestrictions(TypedDict):
    enabled: NotRequired[bool]
    allowedOrigins: NotRequired[List[str]]
    allowedAssistantIds: NotRequired[List[str]]
    allowTransientAssistant: NotRequired[bool]


class CreateTokenDTO(TypedDict):
    tag: NotRequired[Literal["private", "public"]]
    name: NotRequired[str]
    restrictions: NotRequired[TokenRestrictions]


class Token(TypedDict):
    tag: NotRequired[Literal["private", "public"]]
    id: str
    orgId: str
    createdAt: str
    updatedAt: str
    value: str
    name: NotRequired[str]
    restrictions: NotRequired[TokenRestrictions]


class Providers(Enum):
    """
    List of providers you want to sync.
    """

    field_11labs = "11labs"
    azure = "azure"
    cartesia = "cartesia"
    custom_voice = "custom-voice"
    deepgram = "deepgram"
    lmnt = "lmnt"
    neets = "neets"
    openai = "openai"
    playht = "playht"
    rime_ai = "rime-ai"


class SyncVoiceLibraryDTO(TypedDict):
    providers: NotRequired[
        Union[
            List[
                Literal[
                    "11labs",
                    "azure",
                    "cartesia",
                    "custom-voice",
                    "deepgram",
                    "lmnt",
                    "neets",
                    "openai",
                    "playht",
                    "rime-ai",
                ]
            ],
            Providers,
        ]
    ]


class ClientMessageHang(TypedDict):
    type: Literal["hang"]


class ClientMessageMetadata(TypedDict):
    type: Literal["metadata"]
    metadata: str


class ClientMessageModelOutput(TypedDict):
    type: Literal["model-output"]
    output: Dict[str, Any]


class ClientMessageSpeechUpdate(TypedDict):
    type: Literal["speech-update"]
    status: Literal["started", "stopped"]
    role: Literal["assistant", "user"]


class ClientMessageTranscript(TypedDict):
    type: Literal["transcript"]
    role: Literal["assistant", "user"]
    transcriptType: Literal["partial", "final"]
    transcript: str


class ToolCallFunction(TypedDict):
    name: str
    arguments: Dict[str, Any]


class ToolCall(TypedDict):
    type: Literal["function"]
    function: ToolCallFunction
    id: str


class ClientMessageToolCallsResult(TypedDict):
    type: Literal["tool-calls-result"]
    toolCallResult: Dict[str, Any]


class ClientMessageUserInterrupted(TypedDict):
    type: Literal["user-interrupted"]


class ClientMessageLanguageChanged(TypedDict):
    type: Literal["language-changed"]
    language: str


class ClientMessageVoiceInput(TypedDict):
    type: Literal["voice-input"]
    input: str


class ToolCallResult(TypedDict):
    message: NotRequired[List[Union[ToolMessageComplete, ToolMessageFailed]]]
    name: str
    toolCallId: str
    result: NotRequired[str]
    error: NotRequired[str]


class ServerMessageResponseToolCalls(TypedDict):
    results: NotRequired[List[ToolCallResult]]
    error: NotRequired[str]


class ServerMessageResponseTransferDestinationRequest(TypedDict):
    destination: NotRequired[
        Union[
            TransferDestinationAssistant,
            TransferDestinationStep,
            TransferDestinationNumber,
            TransferDestinationSip,
        ]
    ]
    error: NotRequired[str]


class ServerMessageResponseVoiceRequest(TypedDict):
    data: str


class ClientInboundMessageAddMessage(TypedDict):
    type: Literal["add-message"]
    message: OpenAIMessage


class ClientInboundMessageControl(TypedDict):
    type: Literal["control"]
    control: Literal["mute-assistant", "unmute-assistant", "say-first-message"]


class ClientInboundMessageSay(TypedDict):
    type: NotRequired[Literal["say"]]
    content: NotRequired[str]
    endCallAfterSpoken: NotRequired[bool]


class ClientInboundMessage(TypedDict):
    message: Union[
        ClientInboundMessageAddMessage,
        ClientInboundMessageControl,
        ClientInboundMessageSay,
    ]


class UserMessage(TypedDict):
    role: str
    message: str
    time: float
    endTime: float
    secondsFromStart: float
    duration: NotRequired[float]


class SystemMessage(TypedDict):
    role: str
    message: str
    time: float
    secondsFromStart: float


class BotMessage(TypedDict):
    role: str
    message: str
    time: float
    endTime: float
    secondsFromStart: float
    source: NotRequired[str]
    duration: NotRequired[float]


class ToolCallMessage(TypedDict):
    role: str
    toolCalls: List[Dict[str, Any]]
    message: str
    time: float
    secondsFromStart: float


class ToolCallResultMessage(TypedDict):
    role: str
    toolCallId: str
    name: str
    result: str
    time: float
    secondsFromStart: float


class TransportCost(TypedDict):
    type: Literal["transport"]
    minutes: float
    cost: float


class TranscriberCost(TypedDict):
    type: Literal["transcriber"]
    transcriber: Dict[str, Any]
    minutes: float
    cost: float


class ModelCost(TypedDict):
    type: Literal["model"]
    model: Dict[str, Any]
    promptTokens: float
    completionTokens: float
    cost: float


class VoiceCost(TypedDict):
    type: Literal["voice"]
    voice: Dict[str, Any]
    characters: float
    cost: float


class VapiCost(TypedDict):
    type: Literal["vapi"]
    minutes: float
    cost: float


class AnalysisCost(TypedDict):
    type: Literal["analysis"]
    analysisType: Literal["summary", "structuredData", "successEvaluation"]
    model: Dict[str, Any]
    promptTokens: float
    completionTokens: float
    cost: float


FunctionToolWithToolCall = TypedDict(
    "FunctionToolWithToolCall",
    {
        "async": NotRequired[bool],
        "messages": NotRequired[
            List[
                Union[
                    ToolMessageStart,
                    ToolMessageComplete,
                    ToolMessageFailed,
                    ToolMessageDelayed,
                ]
            ]
        ],
        "type": Literal["function"],
        "toolCall": ToolCall,
        "function": NotRequired[OpenAIFunction],
        "server": NotRequired[Server],
    },
)


GhlToolWithToolCall = TypedDict(
    "GhlToolWithToolCall",
    {
        "async": NotRequired[bool],
        "messages": NotRequired[
            List[
                Union[
                    ToolMessageStart,
                    ToolMessageComplete,
                    ToolMessageFailed,
                    ToolMessageDelayed,
                ]
            ]
        ],
        "type": Literal["ghl"],
        "toolCall": ToolCall,
        "metadata": GhlToolMetadata,
        "function": NotRequired[OpenAIFunction],
        "server": NotRequired[Server],
    },
)


MakeToolWithToolCall = TypedDict(
    "MakeToolWithToolCall",
    {
        "async": NotRequired[bool],
        "messages": NotRequired[
            List[
                Union[
                    ToolMessageStart,
                    ToolMessageComplete,
                    ToolMessageFailed,
                    ToolMessageDelayed,
                ]
            ]
        ],
        "type": Literal["make"],
        "toolCall": ToolCall,
        "metadata": MakeToolMetadata,
        "function": NotRequired[OpenAIFunction],
        "server": NotRequired[Server],
    },
)


class Artifact(TypedDict):
    messages: NotRequired[
        List[
            Union[
                UserMessage,
                SystemMessage,
                BotMessage,
                ToolCallMessage,
                ToolCallResultMessage,
            ]
        ]
    ]
    messagesOpenAIFormatted: NotRequired[List[OpenAIMessage]]
    recordingUrl: NotRequired[str]
    stereoRecordingUrl: NotRequired[str]
    videoRecordingUrl: NotRequired[str]
    videoRecordingStartDelaySeconds: NotRequired[float]
    transcript: NotRequired[str]


class ConversationBlock(TypedDict):
    messages: NotRequired[List[Union[BlockStartMessage, BlockCompleteMessage]]]
    inputSchema: NotRequired[JsonSchema]
    outputSchema: NotRequired[JsonSchema]
    type: Literal["conversation"]
    id: str
    orgId: str
    createdAt: str
    updatedAt: str
    name: NotRequired[str]
    instruction: str


class ToolCallBlock(TypedDict):
    messages: NotRequired[List[Union[BlockStartMessage, BlockCompleteMessage]]]
    inputSchema: NotRequired[JsonSchema]
    outputSchema: NotRequired[JsonSchema]
    type: Literal["tool-call"]
    tool: NotRequired[
        Union[
            CreateDtmfToolDTO,
            CreateEndCallToolDTO,
            CreateVoicemailToolDTO,
            CreateFunctionToolDTO,
            CreateGhlToolDTO,
            CreateMakeToolDTO,
            CreateTransferCallToolDTO,
        ]
    ]
    id: str
    orgId: str
    createdAt: str
    updatedAt: str
    name: NotRequired[str]
    toolId: NotRequired[str]


class ClientMessageConversationUpdate(TypedDict):
    type: Literal["conversation-update"]
    messages: NotRequired[
        List[
            Union[
                UserMessage,
                SystemMessage,
                BotMessage,
                ToolCallMessage,
                ToolCallResultMessage,
            ]
        ]
    ]
    messagesOpenAIFormatted: List[OpenAIMessage]


class ClientMessageToolCalls(TypedDict):
    type: NotRequired[Literal["tool-calls"]]
    toolWithToolCallList: List[
        Union[FunctionToolWithToolCall, GhlToolWithToolCall, MakeToolWithToolCall]
    ]
    toolCallList: List[ToolCall]


class ClientMessage(TypedDict):
    message: Union[
        ClientMessageConversationUpdate,
        ClientMessageHang,
        ClientMessageMetadata,
        ClientMessageModelOutput,
        ClientMessageSpeechUpdate,
        ClientMessageTranscript,
        ClientMessageToolCalls,
        ClientMessageToolCallsResult,
        ClientMessageUserInterrupted,
        ClientMessageLanguageChanged,
        ClientMessageVoiceInput,
    ]


class VapiModel(TypedDict):
    messages: NotRequired[List[OpenAIMessage]]
    tools: NotRequired[
        List[
            Union[
                CreateDtmfToolDTO,
                CreateEndCallToolDTO,
                CreateVoicemailToolDTO,
                CreateFunctionToolDTO,
                CreateGhlToolDTO,
                CreateMakeToolDTO,
                CreateTransferCallToolDTO,
            ]
        ]
    ]
    toolIds: NotRequired[List[str]]
    steps: NotRequired[List[Union[HandoffStep, CallbackStep]]]
    provider: Literal["vapi"]
    model: str
    temperature: NotRequired[float]
    knowledgeBase: NotRequired[KnowledgeBase]
    maxTokens: NotRequired[float]
    emotionRecognitionEnabled: NotRequired[bool]
    numFastTurns: NotRequired[float]


class CreateAssistantDTO(TypedDict):
    transcriber: NotRequired[
        Union[DeepgramTranscriber, GladiaTranscriber, TalkscriberTranscriber]
    ]
    model: NotRequired[
        Union[
            AnyscaleModel,
            AnthropicModel,
            CustomLLMModel,
            DeepInfraModel,
            GroqModel,
            OpenAIModel,
            OpenRouterModel,
            PerplexityAIModel,
            TogetherAIModel,
            VapiModel,
        ]
    ]
    voice: NotRequired[
        Union[
            AzureVoice,
            CartesiaVoice,
            DeepgramVoice,
            ElevenLabsVoice,
            LMNTVoice,
            NeetsVoice,
            OpenAIVoice,
            PlayHTVoice,
            RimeAIVoice,
        ]
    ]
    firstMessageMode: NotRequired[
        Literal[
            "assistant-speaks-first",
            "assistant-speaks-first-with-model-generated-message",
            "assistant-waits-for-user",
        ]
    ]
    hipaaEnabled: NotRequired[bool]
    clientMessages: NotRequired[
        Union[
            List[
                Literal[
                    "conversation-update",
                    "function-call",
                    "function-call-result",
                    "hang",
                    "language-changed",
                    "metadata",
                    "model-output",
                    "speech-update",
                    "status-update",
                    "transcript",
                    "tool-calls",
                    "tool-calls-result",
                    "user-interrupted",
                    "voice-input",
                ]
            ],
            ClientMessages,
        ]
    ]
    serverMessages: NotRequired[
        Union[
            List[
                Literal[
                    "conversation-update",
                    "end-of-call-report",
                    "function-call",
                    "hang",
                    "language-changed",
                    "model-output",
                    "phone-call-control",
                    "speech-update",
                    "status-update",
                    "transcript",
                    "tool-calls",
                    "transfer-destination-request",
                    "transfer-update",
                    "user-interrupted",
                    "voice-input",
                ]
            ],
            ServerMessages,
        ]
    ]
    silenceTimeoutSeconds: NotRequired[float]
    maxDurationSeconds: NotRequired[float]
    backgroundSound: NotRequired[Literal["off", "office"]]
    backchannelingEnabled: NotRequired[bool]
    backgroundDenoisingEnabled: NotRequired[bool]
    modelOutputInMessagesEnabled: NotRequired[bool]
    transportConfigurations: NotRequired[List[TransportConfigurationTwilio]]
    name: NotRequired[str]
    firstMessage: NotRequired[str]
    voicemailDetection: NotRequired[TwilioVoicemailDetection]
    voicemailMessage: NotRequired[str]
    endCallMessage: NotRequired[str]
    endCallPhrases: NotRequired[List[str]]
    metadata: NotRequired[Dict[str, Any]]
    serverUrl: NotRequired[str]
    serverUrlSecret: NotRequired[str]
    analysisPlan: NotRequired[AnalysisPlan]
    artifactPlan: NotRequired[ArtifactPlan]
    messagePlan: NotRequired[MessagePlan]
    startSpeakingPlan: NotRequired[StartSpeakingPlan]
    stopSpeakingPlan: NotRequired[StopSpeakingPlan]
    monitorPlan: NotRequired[MonitorPlan]
    credentialIds: NotRequired[List[str]]


class AssistantOverrides(TypedDict):
    transcriber: NotRequired[
        Union[DeepgramTranscriber, GladiaTranscriber, TalkscriberTranscriber]
    ]
    model: NotRequired[
        Union[
            AnyscaleModel,
            AnthropicModel,
            CustomLLMModel,
            DeepInfraModel,
            GroqModel,
            OpenAIModel,
            OpenRouterModel,
            PerplexityAIModel,
            TogetherAIModel,
            VapiModel,
        ]
    ]
    voice: NotRequired[
        Union[
            AzureVoice,
            CartesiaVoice,
            DeepgramVoice,
            ElevenLabsVoice,
            LMNTVoice,
            NeetsVoice,
            OpenAIVoice,
            PlayHTVoice,
            RimeAIVoice,
        ]
    ]
    firstMessageMode: NotRequired[
        Literal[
            "assistant-speaks-first",
            "assistant-speaks-first-with-model-generated-message",
            "assistant-waits-for-user",
        ]
    ]
    hipaaEnabled: NotRequired[bool]
    clientMessages: NotRequired[
        Union[
            List[
                Literal[
                    "conversation-update",
                    "function-call",
                    "function-call-result",
                    "hang",
                    "language-changed",
                    "metadata",
                    "model-output",
                    "speech-update",
                    "status-update",
                    "transcript",
                    "tool-calls",
                    "tool-calls-result",
                    "user-interrupted",
                    "voice-input",
                ]
            ],
            ClientMessages,
        ]
    ]
    serverMessages: NotRequired[
        Union[
            List[
                Literal[
                    "conversation-update",
                    "end-of-call-report",
                    "function-call",
                    "hang",
                    "language-changed",
                    "model-output",
                    "phone-call-control",
                    "speech-update",
                    "status-update",
                    "transcript",
                    "tool-calls",
                    "transfer-destination-request",
                    "transfer-update",
                    "user-interrupted",
                    "voice-input",
                ]
            ],
            ServerMessages,
        ]
    ]
    silenceTimeoutSeconds: NotRequired[float]
    maxDurationSeconds: NotRequired[float]
    backgroundSound: NotRequired[Literal["off", "office"]]
    backchannelingEnabled: NotRequired[bool]
    backgroundDenoisingEnabled: NotRequired[bool]
    modelOutputInMessagesEnabled: NotRequired[bool]
    transportConfigurations: NotRequired[List[TransportConfigurationTwilio]]
    variableValues: NotRequired[Dict[str, Any]]
    name: NotRequired[str]
    firstMessage: NotRequired[str]
    voicemailDetection: NotRequired[TwilioVoicemailDetection]
    voicemailMessage: NotRequired[str]
    endCallMessage: NotRequired[str]
    endCallPhrases: NotRequired[List[str]]
    metadata: NotRequired[Dict[str, Any]]
    serverUrl: NotRequired[str]
    serverUrlSecret: NotRequired[str]
    analysisPlan: NotRequired[AnalysisPlan]
    artifactPlan: NotRequired[ArtifactPlan]
    messagePlan: NotRequired[MessagePlan]
    startSpeakingPlan: NotRequired[StartSpeakingPlan]
    stopSpeakingPlan: NotRequired[StopSpeakingPlan]
    monitorPlan: NotRequired[MonitorPlan]
    credentialIds: NotRequired[List[str]]


class SquadMemberDTO(TypedDict):
    assistantId: NotRequired[str]
    assistant: NotRequired[CreateAssistantDTO]
    assistantOverrides: NotRequired[AssistantOverrides]
    assistantDestinations: NotRequired[List[TransferDestinationAssistant]]


class CreateSquadDTO(TypedDict):
    name: NotRequired[str]
    members: List[SquadMemberDTO]
    membersOverrides: NotRequired[AssistantOverrides]


class CreateCallDTO(TypedDict):
    name: NotRequired[str]
    assistantId: NotRequired[str]
    assistant: NotRequired[CreateAssistantDTO]
    assistantOverrides: NotRequired[AssistantOverrides]
    squadId: NotRequired[str]
    squad: NotRequired[CreateSquadDTO]
    phoneNumberId: NotRequired[str]
    phoneNumber: NotRequired[ImportTwilioPhoneNumberDTO]
    customerId: NotRequired[str]
    customer: NotRequired[CreateCustomerDTO]


class Call(TypedDict):
    type: NotRequired[Literal["inboundPhoneCall", "outboundPhoneCall", "webCall"]]
    costs: NotRequired[
        List[
            Union[
                TransportCost,
                TranscriberCost,
                ModelCost,
                VoiceCost,
                VapiCost,
                AnalysisCost,
            ]
        ]
    ]
    messages: NotRequired[
        List[
            Union[
                UserMessage,
                SystemMessage,
                BotMessage,
                ToolCallMessage,
                ToolCallResultMessage,
            ]
        ]
    ]
    phoneCallProvider: NotRequired[Literal["twilio", "vonage", "vapi"]]
    phoneCallTransport: NotRequired[Literal["sip", "pstn"]]
    status: NotRequired[
        Literal["queued", "ringing", "in-progress", "forwarding", "ended"]
    ]
    endedReason: NotRequired[
        Literal[
            "assistant-error",
            "assistant-not-found",
            "db-error",
            "no-server-available",
            "license-check-failed",
            "pipeline-error-openai-llm-failed",
            "pipeline-error-azure-openai-llm-failed",
            "pipeline-error-groq-llm-failed",
            "pipeline-error-anthropic-llm-failed",
            "pipeline-error-vapi-llm-failed",
            "pipeline-error-vapi-400-bad-request-validation-failed",
            "pipeline-error-vapi-401-unauthorized",
            "pipeline-error-vapi-403-model-access-denied",
            "pipeline-error-vapi-429-exceeded-quota",
            "pipeline-error-vapi-500-server-error",
            "pipeline-error-openai-voice-failed",
            "pipeline-error-cartesia-voice-failed",
            "pipeline-error-deepgram-transcriber-failed",
            "pipeline-error-deepgram-voice-failed",
            "pipeline-error-gladia-transcriber-failed",
            "pipeline-error-eleven-labs-voice-failed",
            "pipeline-error-playht-voice-failed",
            "pipeline-error-lmnt-voice-failed",
            "pipeline-error-azure-voice-failed",
            "pipeline-error-rime-ai-voice-failed",
            "pipeline-error-neets-voice-failed",
            "pipeline-no-available-model",
            "worker-shutdown",
            "unknown-error",
            "vonage-disconnected",
            "vonage-failed-to-connect-call",
            "phone-call-provider-bypass-enabled-but-no-call-received",
            "vapifault-phone-call-worker-setup-socket-error",
            "vapifault-phone-call-worker-worker-setup-socket-timeout",
            "vapifault-phone-call-worker-could-not-find-call",
            "vapifault-transport-never-connected",
            "vapifault-web-call-worker-setup-failed",
            "vapifault-transport-connected-but-call-not-active",
            "assistant-not-invalid",
            "assistant-not-provided",
            "call-start-error-neither-assistant-nor-server-set",
            "assistant-request-failed",
            "assistant-request-returned-error",
            "assistant-request-returned-unspeakable-error",
            "assistant-request-returned-invalid-assistant",
            "assistant-request-returned-no-assistant",
            "assistant-request-returned-forwarding-phone-number",
            "assistant-ended-call",
            "assistant-said-end-call-phrase",
            "assistant-forwarded-call",
            "assistant-join-timed-out",
            "customer-busy",
            "customer-ended-call",
            "customer-did-not-answer",
            "customer-did-not-give-microphone-permission",
            "assistant-said-message-with-end-call-enabled",
            "exceeded-max-duration",
            "manually-canceled",
            "phone-call-provider-closed-websocket",
            "pipeline-error-openai-400-bad-request-validation-failed",
            "pipeline-error-openai-401-unauthorized",
            "pipeline-error-openai-403-model-access-denied",
            "pipeline-error-openai-429-exceeded-quota",
            "pipeline-error-openai-500-server-error",
            "pipeline-error-azure-openai-400-bad-request-validation-failed",
            "pipeline-error-azure-openai-401-unauthorized",
            "pipeline-error-azure-openai-403-model-access-denied",
            "pipeline-error-azure-openai-429-exceeded-quota",
            "pipeline-error-azure-openai-500-server-error",
            "pipeline-error-groq-400-bad-request-validation-failed",
            "pipeline-error-groq-401-unauthorized",
            "pipeline-error-groq-403-model-access-denied",
            "pipeline-error-groq-429-exceeded-quota",
            "pipeline-error-groq-500-server-error",
            "pipeline-error-anthropic-400-bad-request-validation-failed",
            "pipeline-error-anthropic-401-unauthorized",
            "pipeline-error-anthropic-403-model-access-denied",
            "pipeline-error-anthropic-429-exceeded-quota",
            "pipeline-error-anthropic-500-server-error",
            "pipeline-error-together-ai-400-bad-request-validation-failed",
            "pipeline-error-together-ai-401-unauthorized",
            "pipeline-error-together-ai-403-model-access-denied",
            "pipeline-error-together-ai-429-exceeded-quota",
            "pipeline-error-together-ai-500-server-error",
            "pipeline-error-together-ai-llm-failed",
            "pipeline-error-anyscale-400-bad-request-validation-failed",
            "pipeline-error-anyscale-401-unauthorized",
            "pipeline-error-anyscale-403-model-access-denied",
            "pipeline-error-anyscale-429-exceeded-quota",
            "pipeline-error-anyscale-500-server-error",
            "pipeline-error-anyscale-llm-failed",
            "pipeline-error-openrouter-400-bad-request-validation-failed",
            "pipeline-error-openrouter-401-unauthorized",
            "pipeline-error-openrouter-403-model-access-denied",
            "pipeline-error-openrouter-429-exceeded-quota",
            "pipeline-error-openrouter-500-server-error",
            "pipeline-error-openrouter-llm-failed",
            "pipeline-error-perplexity-ai-400-bad-request-validation-failed",
            "pipeline-error-perplexity-ai-401-unauthorized",
            "pipeline-error-perplexity-ai-403-model-access-denied",
            "pipeline-error-perplexity-ai-429-exceeded-quota",
            "pipeline-error-perplexity-ai-500-server-error",
            "pipeline-error-perplexity-ai-llm-failed",
            "pipeline-error-deepinfra-400-bad-request-validation-failed",
            "pipeline-error-deepinfra-401-unauthorized",
            "pipeline-error-deepinfra-403-model-access-denied",
            "pipeline-error-deepinfra-429-exceeded-quota",
            "pipeline-error-deepinfra-500-server-error",
            "pipeline-error-deepinfra-llm-failed",
            "pipeline-error-runpod-400-bad-request-validation-failed",
            "pipeline-error-runpod-401-unauthorized",
            "pipeline-error-runpod-403-model-access-denied",
            "pipeline-error-runpod-429-exceeded-quota",
            "pipeline-error-runpod-500-server-error",
            "pipeline-error-runpod-llm-failed",
            "pipeline-error-custom-llm-400-bad-request-validation-failed",
            "pipeline-error-custom-llm-401-unauthorized",
            "pipeline-error-custom-llm-403-model-access-denied",
            "pipeline-error-custom-llm-429-exceeded-quota",
            "pipeline-error-custom-llm-500-server-error",
            "pipeline-error-custom-llm-llm-failed",
            "pipeline-error-cartesia-socket-hang-up",
            "pipeline-error-cartesia-requested-payment",
            "pipeline-error-cartesia-500-server-error",
            "pipeline-error-cartesia-503-server-error",
            "pipeline-error-cartesia-522-server-error",
            "pipeline-error-custom-voice-failed",
            "pipeline-error-eleven-labs-voice-not-found",
            "pipeline-error-eleven-labs-quota-exceeded",
            "pipeline-error-eleven-labs-unauthorized-access",
            "pipeline-error-eleven-labs-unauthorized-to-access-model",
            "pipeline-error-eleven-labs-professional-voices-only-for-creator-plus",
            "pipeline-error-eleven-labs-blocked-free-plan-and-requested-upgrade",
            "pipeline-error-eleven-labs-blocked-concurrent-requests-and-requested-upgrade",
            "pipeline-error-eleven-labs-blocked-using-instant-voice-clone-and-requested-upgrade",
            "pipeline-error-eleven-labs-system-busy-and-requested-upgrade",
            "pipeline-error-eleven-labs-voice-not-fine-tuned",
            "pipeline-error-eleven-labs-invalid-api-key",
            "pipeline-error-eleven-labs-invalid-voice-samples",
            "pipeline-error-eleven-labs-voice-disabled-by-owner",
            "pipeline-error-eleven-labs-blocked-account-in-probation",
            "pipeline-error-eleven-labs-blocked-content-against-their-policy",
            "pipeline-error-eleven-labs-missing-samples-for-voice-clone",
            "pipeline-error-eleven-labs-voice-not-fine-tuned-and-cannot-be-used",
            "pipeline-error-eleven-labs-voice-not-allowed-for-free-users",
            "pipeline-error-eleven-labs-500-server-error",
            "pipeline-error-eleven-labs-max-character-limit-exceeded",
            "pipeline-error-playht-request-timed-out",
            "pipeline-error-playht-invalid-voice",
            "pipeline-error-playht-unexpected-error",
            "pipeline-error-playht-out-of-credits",
            "pipeline-error-playht-voice-must-be-a-valid-voice-manifest-uri",
            "pipeline-error-playht-401-unauthorized",
            "pipeline-error-playht-403-forbidden-out-of-characters",
            "pipeline-error-playht-403-forbidden-api-access-not-available",
            "pipeline-error-playht-429-exceeded-quota",
            "pipeline-error-playht-502-gateway-error",
            "pipeline-error-playht-504-gateway-error",
            "pipeline-error-deepgram-403-model-access-denied",
            "pipeline-error-deepgram-404-not-found",
            "pipeline-error-deepgram-400-no-such-model-language-tier-combination",
            "pipeline-error-deepgram-500-returning-invalid-json",
            "sip-gateway-failed-to-connect-call",
            "silence-timed-out",
            "twilio-failed-to-connect-call",
            "twilio-reported-customer-misdialed",
            "voicemail",
            "vonage-rejected",
        ]
    ]
    destination: NotRequired[Union[TransferDestinationNumber, TransferDestinationSip]]
    id: str
    orgId: str
    createdAt: str
    updatedAt: str
    startedAt: NotRequired[str]
    endedAt: NotRequired[str]
    cost: NotRequired[float]
    costBreakdown: NotRequired[CostBreakdown]
    artifactPlan: NotRequired[ArtifactPlan]
    analysis: NotRequired[Analysis]
    monitor: NotRequired[Monitor]
    artifact: NotRequired[Artifact]
    phoneCallProviderId: NotRequired[str]
    assistantId: NotRequired[str]
    assistant: NotRequired[CreateAssistantDTO]
    assistantOverrides: NotRequired[AssistantOverrides]
    squadId: NotRequired[str]
    squad: NotRequired[CreateSquadDTO]
    phoneNumberId: NotRequired[str]
    phoneNumber: NotRequired[ImportTwilioPhoneNumberDTO]
    customerId: NotRequired[str]
    customer: NotRequired[CreateCustomerDTO]
    name: NotRequired[str]


class CallPaginatedResponse(TypedDict):
    results: List[Call]
    metadata: PaginationMeta


class CreateOutboundCallDTO(CreateCallDTO):
    pass


class CreateWebCallDTO(TypedDict):
    assistantId: NotRequired[str]
    assistant: NotRequired[CreateAssistantDTO]
    assistantOverrides: NotRequired[AssistantOverrides]
    squadId: NotRequired[str]
    squad: NotRequired[CreateSquadDTO]


class Assistant(TypedDict):
    transcriber: NotRequired[
        Union[DeepgramTranscriber, GladiaTranscriber, TalkscriberTranscriber]
    ]
    model: NotRequired[
        Union[
            AnyscaleModel,
            AnthropicModel,
            CustomLLMModel,
            DeepInfraModel,
            GroqModel,
            OpenAIModel,
            OpenRouterModel,
            PerplexityAIModel,
            TogetherAIModel,
            VapiModel,
        ]
    ]
    voice: NotRequired[
        Union[
            AzureVoice,
            CartesiaVoice,
            DeepgramVoice,
            ElevenLabsVoice,
            LMNTVoice,
            NeetsVoice,
            OpenAIVoice,
            PlayHTVoice,
            RimeAIVoice,
        ]
    ]
    firstMessageMode: NotRequired[
        Literal[
            "assistant-speaks-first",
            "assistant-speaks-first-with-model-generated-message",
            "assistant-waits-for-user",
        ]
    ]
    hipaaEnabled: NotRequired[bool]
    clientMessages: NotRequired[
        Union[
            List[
                Literal[
                    "conversation-update",
                    "function-call",
                    "function-call-result",
                    "hang",
                    "language-changed",
                    "metadata",
                    "model-output",
                    "speech-update",
                    "status-update",
                    "transcript",
                    "tool-calls",
                    "tool-calls-result",
                    "user-interrupted",
                    "voice-input",
                ]
            ],
            ClientMessages,
        ]
    ]
    serverMessages: NotRequired[
        Union[
            List[
                Literal[
                    "conversation-update",
                    "end-of-call-report",
                    "function-call",
                    "hang",
                    "language-changed",
                    "model-output",
                    "phone-call-control",
                    "speech-update",
                    "status-update",
                    "transcript",
                    "tool-calls",
                    "transfer-destination-request",
                    "transfer-update",
                    "user-interrupted",
                    "voice-input",
                ]
            ],
            ServerMessages,
        ]
    ]
    silenceTimeoutSeconds: NotRequired[float]
    maxDurationSeconds: NotRequired[float]
    backgroundSound: NotRequired[Literal["off", "office"]]
    backchannelingEnabled: NotRequired[bool]
    backgroundDenoisingEnabled: NotRequired[bool]
    modelOutputInMessagesEnabled: NotRequired[bool]
    transportConfigurations: NotRequired[List[TransportConfigurationTwilio]]
    name: NotRequired[str]
    firstMessage: NotRequired[str]
    voicemailDetection: NotRequired[TwilioVoicemailDetection]
    voicemailMessage: NotRequired[str]
    endCallMessage: NotRequired[str]
    endCallPhrases: NotRequired[List[str]]
    metadata: NotRequired[Dict[str, Any]]
    serverUrl: NotRequired[str]
    serverUrlSecret: NotRequired[str]
    analysisPlan: NotRequired[AnalysisPlan]
    artifactPlan: NotRequired[ArtifactPlan]
    messagePlan: NotRequired[MessagePlan]
    startSpeakingPlan: NotRequired[StartSpeakingPlan]
    stopSpeakingPlan: NotRequired[StopSpeakingPlan]
    monitorPlan: NotRequired[MonitorPlan]
    credentialIds: NotRequired[List[str]]
    id: str
    orgId: str
    createdAt: str
    updatedAt: str


class UpdateAssistantDTO(CreateAssistantDTO):
    pass


class Squad(TypedDict):
    name: NotRequired[str]
    members: List[SquadMemberDTO]
    membersOverrides: NotRequired[AssistantOverrides]
    id: str
    orgId: str
    createdAt: str
    updatedAt: str


class UpdateSquadDTO(CreateSquadDTO):
    pass


class WorkflowBlock(TypedDict):
    messages: NotRequired[List[Union[BlockStartMessage, BlockCompleteMessage]]]
    inputSchema: NotRequired[JsonSchema]
    outputSchema: NotRequired[JsonSchema]
    type: Literal["workflow"]
    steps: NotRequired[List[Union[HandoffStep, CallbackStep]]]
    id: str
    orgId: str
    createdAt: str
    updatedAt: str
    name: NotRequired[str]


class HandoffStep(TypedDict):
    block: NotRequired[
        Union[
            CreateConversationBlockDTO, CreateToolCallBlockDTO, CreateWorkflowBlockDTO
        ]
    ]
    type: Literal["handoff"]
    destinations: NotRequired[List[StepDestination]]
    name: str
    blockId: NotRequired[str]
    input: NotRequired[Dict[str, Any]]


class CallbackStep(TypedDict):
    block: NotRequired[
        Union[
            CreateConversationBlockDTO, CreateToolCallBlockDTO, CreateWorkflowBlockDTO
        ]
    ]
    type: Literal["callback"]
    mutations: NotRequired[List[AssignmentMutation]]
    name: str
    blockId: NotRequired[str]
    input: NotRequired[Dict[str, Any]]


class CreateWorkflowBlockDTO(TypedDict):
    messages: NotRequired[List[Union[BlockStartMessage, BlockCompleteMessage]]]
    inputSchema: NotRequired[JsonSchema]
    outputSchema: NotRequired[JsonSchema]
    type: Literal["workflow"]
    steps: NotRequired[List[Union[HandoffStep, CallbackStep]]]
    name: NotRequired[str]


class UpdateBlockDTO(TypedDict):
    messages: NotRequired[List[Union[BlockStartMessage, BlockCompleteMessage]]]
    inputSchema: NotRequired[JsonSchema]
    outputSchema: NotRequired[JsonSchema]
    tool: NotRequired[
        Union[
            CreateDtmfToolDTO,
            CreateEndCallToolDTO,
            CreateVoicemailToolDTO,
            CreateFunctionToolDTO,
            CreateGhlToolDTO,
            CreateMakeToolDTO,
            CreateTransferCallToolDTO,
        ]
    ]
    steps: NotRequired[List[Union[HandoffStep, CallbackStep]]]
    name: NotRequired[str]
    instruction: NotRequired[str]
    toolId: NotRequired[str]


class ServerMessageAssistantRequest(TypedDict):
    phoneNumber: NotRequired[
        Union[
            CreateByoPhoneNumberDTO,
            CreateTwilioPhoneNumberDTO,
            CreateVonagePhoneNumberDTO,
            CreateVapiPhoneNumberDTO,
        ]
    ]
    type: Literal["assistant-request"]
    timestamp: NotRequired[str]
    artifact: NotRequired[Artifact]
    assistant: NotRequired[CreateAssistantDTO]
    customer: NotRequired[CreateCustomerDTO]
    call: NotRequired[Call]


class ServerMessageConversationUpdate(TypedDict):
    phoneNumber: NotRequired[
        Union[
            CreateByoPhoneNumberDTO,
            CreateTwilioPhoneNumberDTO,
            CreateVonagePhoneNumberDTO,
            CreateVapiPhoneNumberDTO,
        ]
    ]
    type: Literal["conversation-update"]
    messages: NotRequired[
        List[
            Union[
                UserMessage,
                SystemMessage,
                BotMessage,
                ToolCallMessage,
                ToolCallResultMessage,
            ]
        ]
    ]
    messagesOpenAIFormatted: List[OpenAIMessage]
    timestamp: NotRequired[str]
    artifact: NotRequired[Artifact]
    assistant: NotRequired[CreateAssistantDTO]
    customer: NotRequired[CreateCustomerDTO]
    call: NotRequired[Call]


class ServerMessageEndOfCallReport(TypedDict):
    phoneNumber: NotRequired[
        Union[
            CreateByoPhoneNumberDTO,
            CreateTwilioPhoneNumberDTO,
            CreateVonagePhoneNumberDTO,
            CreateVapiPhoneNumberDTO,
        ]
    ]
    type: Literal["end-of-call-report"]
    endedReason: Literal[
        "assistant-error",
        "assistant-not-found",
        "db-error",
        "no-server-available",
        "license-check-failed",
        "pipeline-error-openai-llm-failed",
        "pipeline-error-azure-openai-llm-failed",
        "pipeline-error-groq-llm-failed",
        "pipeline-error-anthropic-llm-failed",
        "pipeline-error-vapi-llm-failed",
        "pipeline-error-vapi-400-bad-request-validation-failed",
        "pipeline-error-vapi-401-unauthorized",
        "pipeline-error-vapi-403-model-access-denied",
        "pipeline-error-vapi-429-exceeded-quota",
        "pipeline-error-vapi-500-server-error",
        "pipeline-error-openai-voice-failed",
        "pipeline-error-cartesia-voice-failed",
        "pipeline-error-deepgram-transcriber-failed",
        "pipeline-error-deepgram-voice-failed",
        "pipeline-error-gladia-transcriber-failed",
        "pipeline-error-eleven-labs-voice-failed",
        "pipeline-error-playht-voice-failed",
        "pipeline-error-lmnt-voice-failed",
        "pipeline-error-azure-voice-failed",
        "pipeline-error-rime-ai-voice-failed",
        "pipeline-error-neets-voice-failed",
        "pipeline-no-available-model",
        "worker-shutdown",
        "unknown-error",
        "vonage-disconnected",
        "vonage-failed-to-connect-call",
        "phone-call-provider-bypass-enabled-but-no-call-received",
        "vapifault-phone-call-worker-setup-socket-error",
        "vapifault-phone-call-worker-worker-setup-socket-timeout",
        "vapifault-phone-call-worker-could-not-find-call",
        "vapifault-transport-never-connected",
        "vapifault-web-call-worker-setup-failed",
        "vapifault-transport-connected-but-call-not-active",
        "assistant-not-invalid",
        "assistant-not-provided",
        "call-start-error-neither-assistant-nor-server-set",
        "assistant-request-failed",
        "assistant-request-returned-error",
        "assistant-request-returned-unspeakable-error",
        "assistant-request-returned-invalid-assistant",
        "assistant-request-returned-no-assistant",
        "assistant-request-returned-forwarding-phone-number",
        "assistant-ended-call",
        "assistant-said-end-call-phrase",
        "assistant-forwarded-call",
        "assistant-join-timed-out",
        "customer-busy",
        "customer-ended-call",
        "customer-did-not-answer",
        "customer-did-not-give-microphone-permission",
        "assistant-said-message-with-end-call-enabled",
        "exceeded-max-duration",
        "manually-canceled",
        "phone-call-provider-closed-websocket",
        "pipeline-error-openai-400-bad-request-validation-failed",
        "pipeline-error-openai-401-unauthorized",
        "pipeline-error-openai-403-model-access-denied",
        "pipeline-error-openai-429-exceeded-quota",
        "pipeline-error-openai-500-server-error",
        "pipeline-error-azure-openai-400-bad-request-validation-failed",
        "pipeline-error-azure-openai-401-unauthorized",
        "pipeline-error-azure-openai-403-model-access-denied",
        "pipeline-error-azure-openai-429-exceeded-quota",
        "pipeline-error-azure-openai-500-server-error",
        "pipeline-error-groq-400-bad-request-validation-failed",
        "pipeline-error-groq-401-unauthorized",
        "pipeline-error-groq-403-model-access-denied",
        "pipeline-error-groq-429-exceeded-quota",
        "pipeline-error-groq-500-server-error",
        "pipeline-error-anthropic-400-bad-request-validation-failed",
        "pipeline-error-anthropic-401-unauthorized",
        "pipeline-error-anthropic-403-model-access-denied",
        "pipeline-error-anthropic-429-exceeded-quota",
        "pipeline-error-anthropic-500-server-error",
        "pipeline-error-together-ai-400-bad-request-validation-failed",
        "pipeline-error-together-ai-401-unauthorized",
        "pipeline-error-together-ai-403-model-access-denied",
        "pipeline-error-together-ai-429-exceeded-quota",
        "pipeline-error-together-ai-500-server-error",
        "pipeline-error-together-ai-llm-failed",
        "pipeline-error-anyscale-400-bad-request-validation-failed",
        "pipeline-error-anyscale-401-unauthorized",
        "pipeline-error-anyscale-403-model-access-denied",
        "pipeline-error-anyscale-429-exceeded-quota",
        "pipeline-error-anyscale-500-server-error",
        "pipeline-error-anyscale-llm-failed",
        "pipeline-error-openrouter-400-bad-request-validation-failed",
        "pipeline-error-openrouter-401-unauthorized",
        "pipeline-error-openrouter-403-model-access-denied",
        "pipeline-error-openrouter-429-exceeded-quota",
        "pipeline-error-openrouter-500-server-error",
        "pipeline-error-openrouter-llm-failed",
        "pipeline-error-perplexity-ai-400-bad-request-validation-failed",
        "pipeline-error-perplexity-ai-401-unauthorized",
        "pipeline-error-perplexity-ai-403-model-access-denied",
        "pipeline-error-perplexity-ai-429-exceeded-quota",
        "pipeline-error-perplexity-ai-500-server-error",
        "pipeline-error-perplexity-ai-llm-failed",
        "pipeline-error-deepinfra-400-bad-request-validation-failed",
        "pipeline-error-deepinfra-401-unauthorized",
        "pipeline-error-deepinfra-403-model-access-denied",
        "pipeline-error-deepinfra-429-exceeded-quota",
        "pipeline-error-deepinfra-500-server-error",
        "pipeline-error-deepinfra-llm-failed",
        "pipeline-error-runpod-400-bad-request-validation-failed",
        "pipeline-error-runpod-401-unauthorized",
        "pipeline-error-runpod-403-model-access-denied",
        "pipeline-error-runpod-429-exceeded-quota",
        "pipeline-error-runpod-500-server-error",
        "pipeline-error-runpod-llm-failed",
        "pipeline-error-custom-llm-400-bad-request-validation-failed",
        "pipeline-error-custom-llm-401-unauthorized",
        "pipeline-error-custom-llm-403-model-access-denied",
        "pipeline-error-custom-llm-429-exceeded-quota",
        "pipeline-error-custom-llm-500-server-error",
        "pipeline-error-custom-llm-llm-failed",
        "pipeline-error-cartesia-socket-hang-up",
        "pipeline-error-cartesia-requested-payment",
        "pipeline-error-cartesia-500-server-error",
        "pipeline-error-cartesia-503-server-error",
        "pipeline-error-cartesia-522-server-error",
        "pipeline-error-custom-voice-failed",
        "pipeline-error-eleven-labs-voice-not-found",
        "pipeline-error-eleven-labs-quota-exceeded",
        "pipeline-error-eleven-labs-unauthorized-access",
        "pipeline-error-eleven-labs-unauthorized-to-access-model",
        "pipeline-error-eleven-labs-professional-voices-only-for-creator-plus",
        "pipeline-error-eleven-labs-blocked-free-plan-and-requested-upgrade",
        "pipeline-error-eleven-labs-blocked-concurrent-requests-and-requested-upgrade",
        "pipeline-error-eleven-labs-blocked-using-instant-voice-clone-and-requested-upgrade",
        "pipeline-error-eleven-labs-system-busy-and-requested-upgrade",
        "pipeline-error-eleven-labs-voice-not-fine-tuned",
        "pipeline-error-eleven-labs-invalid-api-key",
        "pipeline-error-eleven-labs-invalid-voice-samples",
        "pipeline-error-eleven-labs-voice-disabled-by-owner",
        "pipeline-error-eleven-labs-blocked-account-in-probation",
        "pipeline-error-eleven-labs-blocked-content-against-their-policy",
        "pipeline-error-eleven-labs-missing-samples-for-voice-clone",
        "pipeline-error-eleven-labs-voice-not-fine-tuned-and-cannot-be-used",
        "pipeline-error-eleven-labs-voice-not-allowed-for-free-users",
        "pipeline-error-eleven-labs-500-server-error",
        "pipeline-error-eleven-labs-max-character-limit-exceeded",
        "pipeline-error-playht-request-timed-out",
        "pipeline-error-playht-invalid-voice",
        "pipeline-error-playht-unexpected-error",
        "pipeline-error-playht-out-of-credits",
        "pipeline-error-playht-voice-must-be-a-valid-voice-manifest-uri",
        "pipeline-error-playht-401-unauthorized",
        "pipeline-error-playht-403-forbidden-out-of-characters",
        "pipeline-error-playht-403-forbidden-api-access-not-available",
        "pipeline-error-playht-429-exceeded-quota",
        "pipeline-error-playht-502-gateway-error",
        "pipeline-error-playht-504-gateway-error",
        "pipeline-error-deepgram-403-model-access-denied",
        "pipeline-error-deepgram-404-not-found",
        "pipeline-error-deepgram-400-no-such-model-language-tier-combination",
        "pipeline-error-deepgram-500-returning-invalid-json",
        "sip-gateway-failed-to-connect-call",
        "silence-timed-out",
        "twilio-failed-to-connect-call",
        "twilio-reported-customer-misdialed",
        "voicemail",
        "vonage-rejected",
    ]
    cost: NotRequired[float]
    costs: NotRequired[
        List[
            Union[
                TransportCost,
                TranscriberCost,
                ModelCost,
                VoiceCost,
                VapiCost,
                AnalysisCost,
            ]
        ]
    ]
    timestamp: NotRequired[str]
    artifact: Artifact
    assistant: NotRequired[CreateAssistantDTO]
    customer: NotRequired[CreateCustomerDTO]
    call: NotRequired[Call]
    analysis: Analysis
    startedAt: NotRequired[str]
    endedAt: NotRequired[str]


class ServerMessageHang(TypedDict):
    phoneNumber: NotRequired[
        Union[
            CreateByoPhoneNumberDTO,
            CreateTwilioPhoneNumberDTO,
            CreateVonagePhoneNumberDTO,
            CreateVapiPhoneNumberDTO,
        ]
    ]
    type: Literal["hang"]
    timestamp: NotRequired[str]
    artifact: NotRequired[Artifact]
    assistant: NotRequired[CreateAssistantDTO]
    customer: NotRequired[CreateCustomerDTO]
    call: NotRequired[Call]


class ServerMessageModelOutput(TypedDict):
    phoneNumber: NotRequired[
        Union[
            CreateByoPhoneNumberDTO,
            CreateTwilioPhoneNumberDTO,
            CreateVonagePhoneNumberDTO,
            CreateVapiPhoneNumberDTO,
        ]
    ]
    type: Literal["model-output"]
    timestamp: NotRequired[str]
    artifact: NotRequired[Artifact]
    assistant: NotRequired[CreateAssistantDTO]
    customer: NotRequired[CreateCustomerDTO]
    call: NotRequired[Call]
    output: Dict[str, Any]


class ServerMessagePhoneCallControl(TypedDict):
    phoneNumber: NotRequired[
        Union[
            CreateByoPhoneNumberDTO,
            CreateTwilioPhoneNumberDTO,
            CreateVonagePhoneNumberDTO,
            CreateVapiPhoneNumberDTO,
        ]
    ]
    type: Literal["phone-call-control"]
    request: Literal["forward", "hang-up"]
    destination: NotRequired[Union[TransferDestinationNumber, TransferDestinationSip]]
    timestamp: NotRequired[str]
    artifact: NotRequired[Artifact]
    assistant: NotRequired[CreateAssistantDTO]
    customer: NotRequired[CreateCustomerDTO]
    call: NotRequired[Call]


class ServerMessageSpeechUpdate(TypedDict):
    phoneNumber: NotRequired[
        Union[
            CreateByoPhoneNumberDTO,
            CreateTwilioPhoneNumberDTO,
            CreateVonagePhoneNumberDTO,
            CreateVapiPhoneNumberDTO,
        ]
    ]
    type: Literal["speech-update"]
    status: Literal["started", "stopped"]
    role: Literal["assistant", "user"]
    timestamp: NotRequired[str]
    artifact: NotRequired[Artifact]
    assistant: NotRequired[CreateAssistantDTO]
    customer: NotRequired[CreateCustomerDTO]
    call: NotRequired[Call]


class ServerMessageStatusUpdate(TypedDict):
    phoneNumber: NotRequired[
        Union[
            CreateByoPhoneNumberDTO,
            CreateTwilioPhoneNumberDTO,
            CreateVonagePhoneNumberDTO,
            CreateVapiPhoneNumberDTO,
        ]
    ]
    type: Literal["status-update"]
    status: Literal["queued", "ringing", "in-progress", "forwarding", "ended"]
    endedReason: NotRequired[
        Literal[
            "assistant-error",
            "assistant-not-found",
            "db-error",
            "no-server-available",
            "license-check-failed",
            "pipeline-error-openai-llm-failed",
            "pipeline-error-azure-openai-llm-failed",
            "pipeline-error-groq-llm-failed",
            "pipeline-error-anthropic-llm-failed",
            "pipeline-error-vapi-llm-failed",
            "pipeline-error-vapi-400-bad-request-validation-failed",
            "pipeline-error-vapi-401-unauthorized",
            "pipeline-error-vapi-403-model-access-denied",
            "pipeline-error-vapi-429-exceeded-quota",
            "pipeline-error-vapi-500-server-error",
            "pipeline-error-openai-voice-failed",
            "pipeline-error-cartesia-voice-failed",
            "pipeline-error-deepgram-transcriber-failed",
            "pipeline-error-deepgram-voice-failed",
            "pipeline-error-gladia-transcriber-failed",
            "pipeline-error-eleven-labs-voice-failed",
            "pipeline-error-playht-voice-failed",
            "pipeline-error-lmnt-voice-failed",
            "pipeline-error-azure-voice-failed",
            "pipeline-error-rime-ai-voice-failed",
            "pipeline-error-neets-voice-failed",
            "pipeline-no-available-model",
            "worker-shutdown",
            "unknown-error",
            "vonage-disconnected",
            "vonage-failed-to-connect-call",
            "phone-call-provider-bypass-enabled-but-no-call-received",
            "vapifault-phone-call-worker-setup-socket-error",
            "vapifault-phone-call-worker-worker-setup-socket-timeout",
            "vapifault-phone-call-worker-could-not-find-call",
            "vapifault-transport-never-connected",
            "vapifault-web-call-worker-setup-failed",
            "vapifault-transport-connected-but-call-not-active",
            "assistant-not-invalid",
            "assistant-not-provided",
            "call-start-error-neither-assistant-nor-server-set",
            "assistant-request-failed",
            "assistant-request-returned-error",
            "assistant-request-returned-unspeakable-error",
            "assistant-request-returned-invalid-assistant",
            "assistant-request-returned-no-assistant",
            "assistant-request-returned-forwarding-phone-number",
            "assistant-ended-call",
            "assistant-said-end-call-phrase",
            "assistant-forwarded-call",
            "assistant-join-timed-out",
            "customer-busy",
            "customer-ended-call",
            "customer-did-not-answer",
            "customer-did-not-give-microphone-permission",
            "assistant-said-message-with-end-call-enabled",
            "exceeded-max-duration",
            "manually-canceled",
            "phone-call-provider-closed-websocket",
            "pipeline-error-openai-400-bad-request-validation-failed",
            "pipeline-error-openai-401-unauthorized",
            "pipeline-error-openai-403-model-access-denied",
            "pipeline-error-openai-429-exceeded-quota",
            "pipeline-error-openai-500-server-error",
            "pipeline-error-azure-openai-400-bad-request-validation-failed",
            "pipeline-error-azure-openai-401-unauthorized",
            "pipeline-error-azure-openai-403-model-access-denied",
            "pipeline-error-azure-openai-429-exceeded-quota",
            "pipeline-error-azure-openai-500-server-error",
            "pipeline-error-groq-400-bad-request-validation-failed",
            "pipeline-error-groq-401-unauthorized",
            "pipeline-error-groq-403-model-access-denied",
            "pipeline-error-groq-429-exceeded-quota",
            "pipeline-error-groq-500-server-error",
            "pipeline-error-anthropic-400-bad-request-validation-failed",
            "pipeline-error-anthropic-401-unauthorized",
            "pipeline-error-anthropic-403-model-access-denied",
            "pipeline-error-anthropic-429-exceeded-quota",
            "pipeline-error-anthropic-500-server-error",
            "pipeline-error-together-ai-400-bad-request-validation-failed",
            "pipeline-error-together-ai-401-unauthorized",
            "pipeline-error-together-ai-403-model-access-denied",
            "pipeline-error-together-ai-429-exceeded-quota",
            "pipeline-error-together-ai-500-server-error",
            "pipeline-error-together-ai-llm-failed",
            "pipeline-error-anyscale-400-bad-request-validation-failed",
            "pipeline-error-anyscale-401-unauthorized",
            "pipeline-error-anyscale-403-model-access-denied",
            "pipeline-error-anyscale-429-exceeded-quota",
            "pipeline-error-anyscale-500-server-error",
            "pipeline-error-anyscale-llm-failed",
            "pipeline-error-openrouter-400-bad-request-validation-failed",
            "pipeline-error-openrouter-401-unauthorized",
            "pipeline-error-openrouter-403-model-access-denied",
            "pipeline-error-openrouter-429-exceeded-quota",
            "pipeline-error-openrouter-500-server-error",
            "pipeline-error-openrouter-llm-failed",
            "pipeline-error-perplexity-ai-400-bad-request-validation-failed",
            "pipeline-error-perplexity-ai-401-unauthorized",
            "pipeline-error-perplexity-ai-403-model-access-denied",
            "pipeline-error-perplexity-ai-429-exceeded-quota",
            "pipeline-error-perplexity-ai-500-server-error",
            "pipeline-error-perplexity-ai-llm-failed",
            "pipeline-error-deepinfra-400-bad-request-validation-failed",
            "pipeline-error-deepinfra-401-unauthorized",
            "pipeline-error-deepinfra-403-model-access-denied",
            "pipeline-error-deepinfra-429-exceeded-quota",
            "pipeline-error-deepinfra-500-server-error",
            "pipeline-error-deepinfra-llm-failed",
            "pipeline-error-runpod-400-bad-request-validation-failed",
            "pipeline-error-runpod-401-unauthorized",
            "pipeline-error-runpod-403-model-access-denied",
            "pipeline-error-runpod-429-exceeded-quota",
            "pipeline-error-runpod-500-server-error",
            "pipeline-error-runpod-llm-failed",
            "pipeline-error-custom-llm-400-bad-request-validation-failed",
            "pipeline-error-custom-llm-401-unauthorized",
            "pipeline-error-custom-llm-403-model-access-denied",
            "pipeline-error-custom-llm-429-exceeded-quota",
            "pipeline-error-custom-llm-500-server-error",
            "pipeline-error-custom-llm-llm-failed",
            "pipeline-error-cartesia-socket-hang-up",
            "pipeline-error-cartesia-requested-payment",
            "pipeline-error-cartesia-500-server-error",
            "pipeline-error-cartesia-503-server-error",
            "pipeline-error-cartesia-522-server-error",
            "pipeline-error-custom-voice-failed",
            "pipeline-error-eleven-labs-voice-not-found",
            "pipeline-error-eleven-labs-quota-exceeded",
            "pipeline-error-eleven-labs-unauthorized-access",
            "pipeline-error-eleven-labs-unauthorized-to-access-model",
            "pipeline-error-eleven-labs-professional-voices-only-for-creator-plus",
            "pipeline-error-eleven-labs-blocked-free-plan-and-requested-upgrade",
            "pipeline-error-eleven-labs-blocked-concurrent-requests-and-requested-upgrade",
            "pipeline-error-eleven-labs-blocked-using-instant-voice-clone-and-requested-upgrade",
            "pipeline-error-eleven-labs-system-busy-and-requested-upgrade",
            "pipeline-error-eleven-labs-voice-not-fine-tuned",
            "pipeline-error-eleven-labs-invalid-api-key",
            "pipeline-error-eleven-labs-invalid-voice-samples",
            "pipeline-error-eleven-labs-voice-disabled-by-owner",
            "pipeline-error-eleven-labs-blocked-account-in-probation",
            "pipeline-error-eleven-labs-blocked-content-against-their-policy",
            "pipeline-error-eleven-labs-missing-samples-for-voice-clone",
            "pipeline-error-eleven-labs-voice-not-fine-tuned-and-cannot-be-used",
            "pipeline-error-eleven-labs-voice-not-allowed-for-free-users",
            "pipeline-error-eleven-labs-500-server-error",
            "pipeline-error-eleven-labs-max-character-limit-exceeded",
            "pipeline-error-playht-request-timed-out",
            "pipeline-error-playht-invalid-voice",
            "pipeline-error-playht-unexpected-error",
            "pipeline-error-playht-out-of-credits",
            "pipeline-error-playht-voice-must-be-a-valid-voice-manifest-uri",
            "pipeline-error-playht-401-unauthorized",
            "pipeline-error-playht-403-forbidden-out-of-characters",
            "pipeline-error-playht-403-forbidden-api-access-not-available",
            "pipeline-error-playht-429-exceeded-quota",
            "pipeline-error-playht-502-gateway-error",
            "pipeline-error-playht-504-gateway-error",
            "pipeline-error-deepgram-403-model-access-denied",
            "pipeline-error-deepgram-404-not-found",
            "pipeline-error-deepgram-400-no-such-model-language-tier-combination",
            "pipeline-error-deepgram-500-returning-invalid-json",
            "sip-gateway-failed-to-connect-call",
            "silence-timed-out",
            "twilio-failed-to-connect-call",
            "twilio-reported-customer-misdialed",
            "voicemail",
            "vonage-rejected",
        ]
    ]
    messages: NotRequired[
        List[
            Union[
                UserMessage,
                SystemMessage,
                BotMessage,
                ToolCallMessage,
                ToolCallResultMessage,
            ]
        ]
    ]
    messagesOpenAIFormatted: NotRequired[List[OpenAIMessage]]
    destination: NotRequired[Union[TransferDestinationNumber, TransferDestinationSip]]
    timestamp: NotRequired[str]
    artifact: NotRequired[Artifact]
    assistant: NotRequired[CreateAssistantDTO]
    customer: NotRequired[CreateCustomerDTO]
    call: NotRequired[Call]
    transcript: NotRequired[str]
    inboundPhoneCallDebuggingArtifacts: NotRequired[Dict[str, Any]]


class ServerMessageToolCalls(TypedDict):
    phoneNumber: NotRequired[
        Union[
            CreateByoPhoneNumberDTO,
            CreateTwilioPhoneNumberDTO,
            CreateVonagePhoneNumberDTO,
            CreateVapiPhoneNumberDTO,
        ]
    ]
    type: NotRequired[Literal["tool-calls"]]
    toolWithToolCallList: List[
        Union[FunctionToolWithToolCall, GhlToolWithToolCall, MakeToolWithToolCall]
    ]
    timestamp: NotRequired[str]
    artifact: NotRequired[Artifact]
    assistant: NotRequired[CreateAssistantDTO]
    customer: NotRequired[CreateCustomerDTO]
    call: NotRequired[Call]
    toolCallList: List[ToolCall]


class ServerMessageTransferDestinationRequest(TypedDict):
    phoneNumber: NotRequired[
        Union[
            CreateByoPhoneNumberDTO,
            CreateTwilioPhoneNumberDTO,
            CreateVonagePhoneNumberDTO,
            CreateVapiPhoneNumberDTO,
        ]
    ]
    type: Literal["transfer-destination-request"]
    timestamp: NotRequired[str]
    artifact: NotRequired[Artifact]
    assistant: NotRequired[CreateAssistantDTO]
    customer: NotRequired[CreateCustomerDTO]
    call: NotRequired[Call]


class ServerMessageTransferUpdate(TypedDict):
    phoneNumber: NotRequired[
        Union[
            CreateByoPhoneNumberDTO,
            CreateTwilioPhoneNumberDTO,
            CreateVonagePhoneNumberDTO,
            CreateVapiPhoneNumberDTO,
        ]
    ]
    type: Literal["transfer-update"]
    destination: NotRequired[
        Union[
            TransferDestinationAssistant,
            TransferDestinationStep,
            TransferDestinationNumber,
            TransferDestinationSip,
        ]
    ]
    timestamp: NotRequired[str]
    artifact: NotRequired[Artifact]
    assistant: NotRequired[CreateAssistantDTO]
    customer: NotRequired[CreateCustomerDTO]
    call: NotRequired[Call]
    toAssistant: NotRequired[CreateAssistantDTO]
    fromAssistant: NotRequired[CreateAssistantDTO]


class ServerMessageTranscript(TypedDict):
    phoneNumber: NotRequired[
        Union[
            CreateByoPhoneNumberDTO,
            CreateTwilioPhoneNumberDTO,
            CreateVonagePhoneNumberDTO,
            CreateVapiPhoneNumberDTO,
        ]
    ]
    type: Literal["transcript"]
    timestamp: NotRequired[str]
    artifact: NotRequired[Artifact]
    assistant: NotRequired[CreateAssistantDTO]
    customer: NotRequired[CreateCustomerDTO]
    call: NotRequired[Call]
    role: Literal["assistant", "user"]
    transcriptType: Literal["partial", "final"]
    transcript: str


class ServerMessageUserInterrupted(TypedDict):
    phoneNumber: NotRequired[
        Union[
            CreateByoPhoneNumberDTO,
            CreateTwilioPhoneNumberDTO,
            CreateVonagePhoneNumberDTO,
            CreateVapiPhoneNumberDTO,
        ]
    ]
    type: Literal["user-interrupted"]
    timestamp: NotRequired[str]
    artifact: NotRequired[Artifact]
    assistant: NotRequired[CreateAssistantDTO]
    customer: NotRequired[CreateCustomerDTO]
    call: NotRequired[Call]


class ServerMessageLanguageChanged(TypedDict):
    phoneNumber: NotRequired[
        Union[
            CreateByoPhoneNumberDTO,
            CreateTwilioPhoneNumberDTO,
            CreateVonagePhoneNumberDTO,
            CreateVapiPhoneNumberDTO,
        ]
    ]
    type: Literal["language-changed"]
    timestamp: NotRequired[str]
    artifact: NotRequired[Artifact]
    assistant: NotRequired[CreateAssistantDTO]
    customer: NotRequired[CreateCustomerDTO]
    call: NotRequired[Call]
    language: str


class ServerMessageVoiceInput(TypedDict):
    phoneNumber: NotRequired[
        Union[
            CreateByoPhoneNumberDTO,
            CreateTwilioPhoneNumberDTO,
            CreateVonagePhoneNumberDTO,
            CreateVapiPhoneNumberDTO,
        ]
    ]
    type: Literal["voice-input"]
    timestamp: NotRequired[str]
    artifact: NotRequired[Artifact]
    assistant: NotRequired[CreateAssistantDTO]
    customer: NotRequired[CreateCustomerDTO]
    call: NotRequired[Call]
    input: str


class ServerMessageVoiceRequest(TypedDict):
    phoneNumber: NotRequired[
        Union[
            CreateByoPhoneNumberDTO,
            CreateTwilioPhoneNumberDTO,
            CreateVonagePhoneNumberDTO,
            CreateVapiPhoneNumberDTO,
        ]
    ]
    type: Literal["voice-request"]
    timestamp: NotRequired[str]
    artifact: NotRequired[Artifact]
    assistant: NotRequired[CreateAssistantDTO]
    customer: NotRequired[CreateCustomerDTO]
    call: NotRequired[Call]
    text: str
    sampleRate: float


class ServerMessage(TypedDict):
    message: Union[
        ServerMessageAssistantRequest,
        ServerMessageConversationUpdate,
        ServerMessageEndOfCallReport,
        ServerMessageHang,
        ServerMessageModelOutput,
        ServerMessagePhoneCallControl,
        ServerMessageSpeechUpdate,
        ServerMessageStatusUpdate,
        ServerMessageToolCalls,
        ServerMessageTransferDestinationRequest,
        ServerMessageTransferUpdate,
        ServerMessageTranscript,
        ServerMessageUserInterrupted,
        ServerMessageLanguageChanged,
        ServerMessageVoiceInput,
        ServerMessageVoiceRequest,
    ]


class ServerMessageResponseAssistantRequest(TypedDict):
    destination: NotRequired[Union[TransferDestinationNumber, TransferDestinationSip]]
    assistantId: NotRequired[str]
    assistant: NotRequired[CreateAssistantDTO]
    assistantOverrides: NotRequired[AssistantOverrides]
    squadId: NotRequired[str]
    squad: NotRequired[CreateSquadDTO]
    error: NotRequired[str]


class ServerMessageResponse(TypedDict):
    messageResponse: Union[
        ServerMessageResponseAssistantRequest,
        ServerMessageResponseToolCalls,
        ServerMessageResponseTransferDestinationRequest,
        ServerMessageResponseVoiceRequest,
    ]
