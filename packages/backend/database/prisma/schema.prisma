generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model alembic_version {
  version_num String @id(map: "alembic_version_pkc") @db.VarChar(32)
}

model conversation {
  id                   Int              @id @unique @default(autoincrement())
  uuid                 String           @unique(map: "ix_conversation_uuid") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userUuid             String           @db.Uuid
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @default(now())
  medium               Medium
  language             Language
  tokenCount           Int
  vapiCallId           String?          @unique
  summary              String?
  assistant_pn         String?
  caller_pn            String?
  starred              Boolean          @default(false)
  viewed               Boolean          @default(false)
  voice_assistant_uuid String?          @db.Uuid
  cache                Json?
  durationInSeconds    Int              @default(0)
  user                 user             @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)
  voice_assistant      voice_assistant? @relation(fields: [voice_assistant_uuid], references: [uuid])
  message              message[]
}

model message {
  id               Int          @id @unique @default(autoincrement())
  uuid             String       @unique(map: "ix_message_uuid") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userUuid         String       @db.Uuid
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @default(now())
  role             Role
  content          String
  conversationUuid String       @db.Uuid
  tokenCount       Int
  index            Int?
  conversation     conversation @relation(fields: [conversationUuid], references: [uuid], onDelete: Cascade)
  user             user         @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)
}

model phone_number {
  id                          Int              @id @unique @default(autoincrement())
  uuid                        String           @unique(map: "ix_phone_number_uuid") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userUuid                    String           @db.Uuid
  voice_assistant_uuid        String?          @db.Uuid
  createdAt                   DateTime         @default(now())
  pn                          String?
  vapi_phone_number_id        String?
  stripe_subscription_item_id String?
  user                        user             @relation(fields: [userUuid], references: [uuid])
  voice_assistant             voice_assistant? @relation(fields: [voice_assistant_uuid], references: [uuid], onDelete: Restrict)
}

model user {
  id                                 Int                  @id @unique @default(autoincrement())
  uuid                               String               @unique(map: "ix_user_uuid") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt                          DateTime             @default(now())
  updatedAt                          DateTime             @default(now())
  name                               String
  email                              String?
  api_key                            String
  stripe_customer_id                 String?
  clerk_id                           String?              @unique
  pn                                 String?
  onboarding_stage                   Int?                 @default(0)
  embedding_tokens                   Int                  @default(0)
  account_balance                    Float                @default(0)
  account_balance_recharge_threshold Float?
  account_balance_recharge_to        Float?
  account_balance_payment_method     String?
  phone_number_balance               Int                  @default(0)
  conversation                       conversation[]
  knowledge                          knowledge[]
  message                            message[]
  phone_number                       phone_number[]
  user_journal_entry                 user_journal_entry[]
  voice_assistant                    voice_assistant[]
}

model voice_assistant {
  id                        Int                       @id @unique @default(autoincrement())
  uuid                      String                    @unique(map: "ix_voice_assistant_uuid") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userUuid                  String                    @db.Uuid
  createdAt                 DateTime                  @default(now())
  vapi_assistant_id         String?
  name                      String?
  prompt_components         Json?                     @default("{}")
  vapi_config               Json?                     @default("{}")
  conversation_duration_sum Int                       @default(0)
  voice_enum                String?
  assistants_to_knowledge   assistants_to_knowledge[]
  conversation              conversation[]
  phone_number              phone_number[]
  user                      user                      @relation(fields: [userUuid], references: [uuid])
}

model knowledge {
  id                      Int                       @id @unique @default(autoincrement())
  uuid                    String                    @unique(map: "ix_knowledge_uuid") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userUuid                String                    @db.Uuid
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @default(now())
  type                    KnowledgeType
  url                     String?
  gcloud_bucket           String?
  gcloud_name             String?
  status                  JobStatus?
  error                   String?
  display_name            String?
  content                 String?
  assistants_to_knowledge assistants_to_knowledge[]
  chunks                  chunks[]
  user                    user                      @relation(fields: [userUuid], references: [uuid])

  @@unique([userUuid, url], map: "uq_useruuid_url")
}

model assistants_to_knowledge {
  knowledge_uuid       String          @db.Uuid
  voice_assistant_uuid String          @db.Uuid
  knowledge            knowledge       @relation(fields: [knowledge_uuid], references: [uuid], onDelete: NoAction, onUpdate: NoAction)
  voice_assistant      voice_assistant @relation(fields: [voice_assistant_uuid], references: [uuid], onDelete: NoAction, onUpdate: NoAction)

  @@id([knowledge_uuid, voice_assistant_uuid])
}

model chunks {
  id                  Int       @id @unique @default(autoincrement())
  createdAt           DateTime  @default(now())
  knowledgeUuid       String    @db.Uuid
  split_type          String?
  index               Int?
  content_start_index Int?
  content_last_index  Int?
  knowledge           knowledge @relation(fields: [knowledgeUuid], references: [uuid])
}

model user_journal_entry {
  id        Int      @id @unique @default(autoincrement())
  uuid      String   @unique(map: "ix_user_journal_entry_uuid") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount    Float?
  userUuid  String?  @db.Uuid
  createdAt DateTime @default(now())
  type      String?
  type_data Json?    @default("{}")
  user      user?    @relation(fields: [userUuid], references: [uuid])
}

enum ConversationStatus {
  TRYING_TO_FIND_ISSUE
  FOUND_UNRESOLVABLE_ISSUE_WAITING_FOR_FINAL_ISSUE_DIAGNOSIS
  FOUND_UNIDENTIFIABLE_ISSUE_WAITING_FOR_FINAL_ISSUE_DIAGNOSIS
  FOUND_RESOLVABLE_ISSUE_WAITING_FOR_FINAL_ISSUE_DIAGNOSIS
  FOUND_AUTORESOLVABLE_ISSUE_WAITING_FOR_FINAL_ISSUE_DIAGNOSIS
  COLLECTING_ISSUE_INFO
  AUTORESOLVED_ISSUE
  CONVERSATION_ENDED
}

enum Language {
  ENGLISH
  SPANISH
}

enum Medium {
  PHONE
  VOICECHAT
  CHAT
}

enum ResolutionType {
  UNRESOLVABLE
  RESOLVABLE_VIA_TICKET
  AUTORESOLVABLE
}

enum Role {
  SYSTEM
  USER
  ASSISTANT
  TOOL
}

enum JobStatus {
  ENQUEUE
  IN_PROGRESS
  READY
  FAILED
}

enum KnowledgeType {
  WEBSITE
  FILE
}
